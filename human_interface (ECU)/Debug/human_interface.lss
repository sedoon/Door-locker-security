
human_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f8  00800060  000033c2  00003456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800258  00800258  0000364e  2**0
                  ALLOC
  3 .stab         00004284  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002083  00000000  00000000  000078d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009957  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d47a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e650  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000eb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_3>
      10:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 35       	cpi	r26, 0x58	; 88
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e5       	ldi	r26, 0x58	; 88
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 18 	call	0x3046	; 0x3046 <main>
      8a:	0c 94 df 19 	jmp	0x33be	; 0x33be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e4       	ldi	r26, 0x49	; 73
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e4       	ldi	r24, 0x49	; 73
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e4       	ldi	r22, 0x49	; 73
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 5a       	subi	r30, 0xAF	; 175
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	19 82       	std	Y+1, r1	; 0x01


	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     e42:	eb e2       	ldi	r30, 0x2B	; 43
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	88 e1       	ldi	r24, 0x18	; 24
     e50:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (0x30&(Config_ptr->parityMode  <<4)) |(0x08&(Config_ptr->stopBit <<3)) | (0x06&(Config_ptr->dataSize  <<1)) ;
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	eb 81       	ldd	r30, Y+3	; 0x03
     e58:	fc 81       	ldd	r31, Y+4	; 0x04
     e5a:	84 81       	ldd	r24, Z+4	; 0x04
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	82 95       	swap	r24
     e62:	92 95       	swap	r25
     e64:	90 7f       	andi	r25, 0xF0	; 240
     e66:	98 27       	eor	r25, r24
     e68:	80 7f       	andi	r24, 0xF0	; 240
     e6a:	98 27       	eor	r25, r24
     e6c:	80 73       	andi	r24, 0x30	; 48
     e6e:	28 2f       	mov	r18, r24
     e70:	20 68       	ori	r18, 0x80	; 128
     e72:	eb 81       	ldd	r30, Y+3	; 0x03
     e74:	fc 81       	ldd	r31, Y+4	; 0x04
     e76:	85 81       	ldd	r24, Z+5	; 0x05
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	88 70       	andi	r24, 0x08	; 8
     e8a:	28 2b       	or	r18, r24
     e8c:	eb 81       	ldd	r30, Y+3	; 0x03
     e8e:	fc 81       	ldd	r31, Y+4	; 0x04
     e90:	86 81       	ldd	r24, Z+6	; 0x06
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	86 70       	andi	r24, 0x06	; 6
     e9c:	82 2b       	or	r24, r18
     e9e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_ptr->baudRate)* 8UL))) - 1);
     ea0:	eb 81       	ldd	r30, Y+3	; 0x03
     ea2:	fc 81       	ldd	r31, Y+4	; 0x04
     ea4:	80 81       	ld	r24, Z
     ea6:	91 81       	ldd	r25, Z+1	; 0x01
     ea8:	a2 81       	ldd	r26, Z+2	; 0x02
     eaa:	b3 81       	ldd	r27, Z+3	; 0x03
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	aa 1f       	adc	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	aa 1f       	adc	r26, r26
     eba:	bb 1f       	adc	r27, r27
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	aa 1f       	adc	r26, r26
     ec2:	bb 1f       	adc	r27, r27
     ec4:	9c 01       	movw	r18, r24
     ec6:	ad 01       	movw	r20, r26
     ec8:	80 e4       	ldi	r24, 0x40	; 64
     eca:	92 e4       	ldi	r25, 0x42	; 66
     ecc:	af e0       	ldi	r26, 0x0F	; 15
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 41 19 	call	0x3282	; 0x3282 <__udivmodsi4>
     ed8:	da 01       	movw	r26, r20
     eda:	c9 01       	movw	r24, r18
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
	

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     ee2:	e0 e4       	ldi	r30, 0x40	; 64
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	89 2f       	mov	r24, r25
     eec:	99 27       	eor	r25, r25
     eee:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     ef0:	e9 e2       	ldi	r30, 0x29	; 41
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	80 83       	st	Z, r24
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f12:	eb e2       	ldi	r30, 0x2B	; 43
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	80 72       	andi	r24, 0x20	; 32
     f1e:	90 70       	andi	r25, 0x00	; 0
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	b9 f3       	breq	.-18     	; 0xf12 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f24:	ec e2       	ldi	r30, 0x2C	; 44
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     f3c:	eb e2       	ldi	r30, 0x2B	; 43
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	88 23       	and	r24, r24
     f44:	dc f7       	brge	.-10     	; 0xf3c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     f46:	ec e2       	ldi	r30, 0x2C	; 44
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <UART_sendString+0x6>
     f58:	0f 92       	push	r0
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	9b 83       	std	Y+3, r25	; 0x03
     f60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f62:	19 82       	std	Y+1, r1	; 0x01
     f64:	0e c0       	rjmp	.+28     	; 0xf82 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	fc 01       	movw	r30, r24
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	80 81       	ld	r24, Z
     f78:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
		i++;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	8f 5f       	subi	r24, 0xFF	; 255
     f80:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	9b 81       	ldd	r25, Y+3	; 0x03
     f8c:	fc 01       	movw	r30, r24
     f8e:	e2 0f       	add	r30, r18
     f90:	f3 1f       	adc	r31, r19
     f92:	80 81       	ld	r24, Z
     f94:	88 23       	and	r24, r24
     f96:	39 f7       	brne	.-50     	; 0xf66 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	00 d0       	rcall	.+0      	; 0xfae <UART_receiveString+0xa>
     fae:	0f 92       	push	r0
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9b 83       	std	Y+3, r25	; 0x03
     fb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fb8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	8c 01       	movw	r16, r24
     fc6:	02 0f       	add	r16, r18
     fc8:	13 1f       	adc	r17, r19
     fca:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
     fce:	f8 01       	movw	r30, r16
     fd0:	80 83       	st	Z, r24
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	8c 01       	movw	r16, r24
     fe6:	02 0f       	add	r16, r18
     fe8:	13 1f       	adc	r17, r19
     fea:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
     fee:	f8 01       	movw	r30, r16
     ff0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	80 81       	ld	r24, Z
    1004:	83 32       	cpi	r24, 0x23	; 35
    1006:	31 f7       	brne	.-52     	; 0xfd4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	fc 01       	movw	r30, r24
    1014:	e2 0f       	add	r30, r18
    1016:	f3 1f       	adc	r31, r19
    1018:	10 82       	st	Z, r1
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <TWI_init>:

#include <avr/io.h>
#include "../../LIB/common_macros.h" /* To use the macros like SET_BIT */

void TWI_init(const Twi_ConfigType * Config_Ptr)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <TWI_init+0x6>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->clock == 400000)
    1038:	e9 81       	ldd	r30, Y+1	; 0x01
    103a:	fa 81       	ldd	r31, Y+2	; 0x02
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	a2 81       	ldd	r26, Z+2	; 0x02
    1042:	b3 81       	ldd	r27, Z+3	; 0x03
    1044:	80 38       	cpi	r24, 0x80	; 128
    1046:	2a e1       	ldi	r18, 0x1A	; 26
    1048:	92 07       	cpc	r25, r18
    104a:	26 e0       	ldi	r18, 0x06	; 6
    104c:	a2 07       	cpc	r26, r18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	b2 07       	cpc	r27, r18
    1052:	41 f4       	brne	.+16     	; 0x1064 <TWI_init+0x3a>
	{
		/*just this speed in TWI is 100k & 400k*/
		/* Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
		TWBR = 2;
    1054:	e0 e2       	ldi	r30, 0x20	; 32
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	80 83       	st	Z, r24
		TWSR = 0x00;
    105c:	e1 e2       	ldi	r30, 0x21	; 33
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	10 82       	st	Z, r1
    1062:	15 c0       	rjmp	.+42     	; 0x108e <TWI_init+0x64>
	}
	else if(Config_Ptr->clock == 100000)
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	a2 81       	ldd	r26, Z+2	; 0x02
    106e:	b3 81       	ldd	r27, Z+3	; 0x03
    1070:	80 3a       	cpi	r24, 0xA0	; 160
    1072:	26 e8       	ldi	r18, 0x86	; 134
    1074:	92 07       	cpc	r25, r18
    1076:	21 e0       	ldi	r18, 0x01	; 1
    1078:	a2 07       	cpc	r26, r18
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	b2 07       	cpc	r27, r18
    107e:	39 f4       	brne	.+14     	; 0x108e <TWI_init+0x64>
	{
		/*just this speed in TWI is 100k & 400k*/
		/* Bit Rate: 100.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
		TWBR = 32;
    1080:	e0 e2       	ldi	r30, 0x20	; 32
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 e2       	ldi	r24, 0x20	; 32
    1086:	80 83       	st	Z, r24
		TWSR = 0x00;
    1088:	e1 e2       	ldi	r30, 0x21	; 33
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	10 82       	st	Z, r1
	}

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->slave_address; // my address = Config_Ptr->slave_address :)
    108e:	a2 e2       	ldi	r26, 0x22	; 34
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e9 81       	ldd	r30, Y+1	; 0x01
    1094:	fa 81       	ldd	r31, Y+2	; 0x02
    1096:	84 81       	ldd	r24, Z+4	; 0x04
    1098:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    109a:	e6 e5       	ldi	r30, 0x56	; 86
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	84 e0       	ldi	r24, 0x04	; 4
    10a0:	80 83       	st	Z, r24
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TWI_start>:

void TWI_start(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    10b4:	e6 e5       	ldi	r30, 0x56	; 86
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	84 ea       	ldi	r24, 0xA4	; 164
    10ba:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    10bc:	e6 e5       	ldi	r30, 0x56	; 86
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	88 23       	and	r24, r24
    10c4:	dc f7       	brge	.-10     	; 0x10bc <TWI_start+0x10>
}
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <TWI_stop>:

void TWI_stop(void)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    10d4:	e6 e5       	ldi	r30, 0x56	; 86
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	84 e9       	ldi	r24, 0x94	; 148
    10da:	80 83       	st	Z, r24
}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    10ee:	e3 e2       	ldi	r30, 0x23	; 35
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    10f6:	e6 e5       	ldi	r30, 0x56	; 86
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	84 e8       	ldi	r24, 0x84	; 132
    10fc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    10fe:	e6 e5       	ldi	r30, 0x56	; 86
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	88 23       	and	r24, r24
    1106:	dc f7       	brge	.-10     	; 0x10fe <TWI_writeByte+0x1c>
}
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1118:	e6 e5       	ldi	r30, 0x56	; 86
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	84 ec       	ldi	r24, 0xC4	; 196
    111e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1120:	e6 e5       	ldi	r30, 0x56	; 86
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 23       	and	r24, r24
    1128:	dc f7       	brge	.-10     	; 0x1120 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    112a:	e3 e2       	ldi	r30, 0x23	; 35
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
}
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    113e:	e6 e5       	ldi	r30, 0x56	; 86
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	84 e8       	ldi	r24, 0x84	; 132
    1144:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1146:	e6 e5       	ldi	r30, 0x56	; 86
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 23       	and	r24, r24
    114e:	dc f7       	brge	.-10     	; 0x1146 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1150:	e3 e2       	ldi	r30, 0x23	; 35
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1166:	e1 e2       	ldi	r30, 0x21	; 33
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	88 7f       	andi	r24, 0xF8	; 248
    116e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
}
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <__vector_9>:

static volatile void (*g_callBackPtr)(void) = NULL_PTR;/*this global function created
for the set_call_back function cause the pointer is local to the function */

ISR(TIMER0_OVF_vect)
{
    117a:	1f 92       	push	r1
    117c:	0f 92       	push	r0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	0f 92       	push	r0
    1182:	11 24       	eor	r1, r1
    1184:	2f 93       	push	r18
    1186:	3f 93       	push	r19
    1188:	4f 93       	push	r20
    118a:	5f 93       	push	r21
    118c:	6f 93       	push	r22
    118e:	7f 93       	push	r23
    1190:	8f 93       	push	r24
    1192:	9f 93       	push	r25
    1194:	af 93       	push	r26
    1196:	bf 93       	push	r27
    1198:	ef 93       	push	r30
    119a:	ff 93       	push	r31
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    11a4:	80 91 58 02 	lds	r24, 0x0258
    11a8:	90 91 59 02 	lds	r25, 0x0259
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	29 f0       	breq	.+10     	; 0x11ba <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    11b0:	e0 91 58 02 	lds	r30, 0x0258
    11b4:	f0 91 59 02 	lds	r31, 0x0259
    11b8:	09 95       	icall
	}
}
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    120a:	80 91 58 02 	lds	r24, 0x0258
    120e:	90 91 59 02 	lds	r25, 0x0259
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	29 f0       	breq	.+10     	; 0x1220 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1216:	e0 91 58 02 	lds	r30, 0x0258
    121a:	f0 91 59 02 	lds	r31, 0x0259
    121e:	09 95       	icall
	}
}
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	0f 90       	pop	r0
    1242:	1f 90       	pop	r1
    1244:	18 95       	reti

00001246 <TIMER0_init>:

void TIMER0_init(const Timer0_ConfigType* Config_Ptr)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <TIMER0_init+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <TIMER0_init+0x8>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <TIMER0_init+0xa>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    1258:	e2 e5       	ldi	r30, 0x52	; 82
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	10 82       	st	Z, r1
	switch(Config_Ptr->mode)
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	80 81       	ld	r24, Z
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3e 83       	std	Y+6, r19	; 0x06
    126a:	2d 83       	std	Y+5, r18	; 0x05
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	31 f0       	breq	.+12     	; 0x1280 <TIMER0_init+0x3a>
    1274:	2d 81       	ldd	r18, Y+5	; 0x05
    1276:	3e 81       	ldd	r19, Y+6	; 0x06
    1278:	21 30       	cpi	r18, 0x01	; 1
    127a:	31 05       	cpc	r19, r1
    127c:	51 f0       	breq	.+20     	; 0x1292 <TIMER0_init+0x4c>
    127e:	17 c0       	rjmp	.+46     	; 0x12ae <TIMER0_init+0x68>
	{
	case TIMER0_NORMAL:
		TCCR0 = (1<<FOC0) | (0x07 & Config_Ptr->prescale);
    1280:	a3 e5       	ldi	r26, 0x53	; 83
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	81 81       	ldd	r24, Z+1	; 0x01
    128a:	87 70       	andi	r24, 0x07	; 7
    128c:	80 68       	ori	r24, 0x80	; 128
    128e:	8c 93       	st	X, r24
    1290:	0e c0       	rjmp	.+28     	; 0x12ae <TIMER0_init+0x68>
		break;
	case TIMER0_CTC:
		TCCR0 = (1<<FOC0) | (1<<WGM01) | (0x07 & Config_Ptr->prescale);
    1292:	a3 e5       	ldi	r26, 0x53	; 83
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e9 81       	ldd	r30, Y+1	; 0x01
    1298:	fa 81       	ldd	r31, Y+2	; 0x02
    129a:	81 81       	ldd	r24, Z+1	; 0x01
    129c:	87 70       	andi	r24, 0x07	; 7
    129e:	88 68       	ori	r24, 0x88	; 136
    12a0:	8c 93       	st	X, r24
		OCR0  = Config_Ptr->OCR;
    12a2:	ac e5       	ldi	r26, 0x5C	; 92
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e9 81       	ldd	r30, Y+1	; 0x01
    12a8:	fa 81       	ldd	r31, Y+2	; 0x02
    12aa:	83 81       	ldd	r24, Z+3	; 0x03
    12ac:	8c 93       	st	X, r24
		break;
	}
	/* enable interrupts */
	switch(Config_Ptr->interrupt)
    12ae:	e9 81       	ldd	r30, Y+1	; 0x01
    12b0:	fa 81       	ldd	r31, Y+2	; 0x02
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3c 83       	std	Y+4, r19	; 0x04
    12ba:	2b 83       	std	Y+3, r18	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	51 f0       	breq	.+20     	; 0x12da <TIMER0_init+0x94>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	69 f0       	breq	.+26     	; 0x12ea <TIMER0_init+0xa4>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	89 f0       	breq	.+34     	; 0x12fa <TIMER0_init+0xb4>
    12d8:	17 c0       	rjmp	.+46     	; 0x1308 <TIMER0_init+0xc2>
	{
	case TIMER0_OVF:
		TIMSK |= (1<<TOIE0);
    12da:	a9 e5       	ldi	r26, 0x59	; 89
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e9 e5       	ldi	r30, 0x59	; 89
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	8c 93       	st	X, r24
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <TIMER0_init+0xc2>
		break;
	case TIMER0_COMP:
		TIMSK |= (1<<OCIE0);
    12ea:	a9 e5       	ldi	r26, 0x59	; 89
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e9 e5       	ldi	r30, 0x59	; 89
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	82 60       	ori	r24, 0x02	; 2
    12f6:	8c 93       	st	X, r24
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <TIMER0_init+0xc2>
		break;
	case TIMER0_POLL:
		TIMSK &= 0xFc;/*1111 1100 polling disable interrupt*/
    12fa:	a9 e5       	ldi	r26, 0x59	; 89
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e9 e5       	ldi	r30, 0x59	; 89
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8c 7f       	andi	r24, 0xFC	; 252
    1306:	8c 93       	st	X, r24
		break;
	}



}
    1308:	26 96       	adiw	r28, 0x06	; 6
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <TIMER0_setCallBack>:

void TIMER0_setCallBack(void(*a_ptr)(void))
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <TIMER0_setCallBack+0x6>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	90 93 59 02 	sts	0x0259, r25
    1330:	80 93 58 02 	sts	0x0258, r24
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <TIMER0_delayMS>:

void TIMER0_delayMS(uint16 msec)/*timer0 delay*/
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	2e 97       	sbiw	r28, 0x0e	; 14
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	9e 87       	std	Y+14, r25	; 0x0e
    1354:	8d 87       	std	Y+13, r24	; 0x0d
	Timer0_ConfigType config = {TIMER0_CTC,TIMER0_N8,TIMER0_POLL,249};/*initial value 250 = 0 -->249*/
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 87       	std	Y+9, r24	; 0x09
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	8a 87       	std	Y+10, r24	; 0x0a
    135e:	1b 86       	std	Y+11, r1	; 0x0b
    1360:	89 ef       	ldi	r24, 0xF9	; 249
    1362:	8c 87       	std	Y+12, r24	; 0x0c
	uint32 n = msec*1000UL/250;
    1364:	8d 85       	ldd	r24, Y+13	; 0x0d
    1366:	9e 85       	ldd	r25, Y+14	; 0x0e
    1368:	cc 01       	movw	r24, r24
    136a:	a0 e0       	ldi	r26, 0x00	; 0
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	28 ee       	ldi	r18, 0xE8	; 232
    1370:	33 e0       	ldi	r19, 0x03	; 3
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	bc 01       	movw	r22, r24
    1378:	cd 01       	movw	r24, r26
    137a:	0e 94 22 19 	call	0x3244	; 0x3244 <__mulsi3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	2a ef       	ldi	r18, 0xFA	; 250
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 41 19 	call	0x3282	; 0x3282 <__udivmodsi4>
    1392:	da 01       	movw	r26, r20
    1394:	c9 01       	movw	r24, r18
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	af 83       	std	Y+7, r26	; 0x07
    139c:	b8 87       	std	Y+8, r27	; 0x08
	uint32 i;
	TIMER0_init(&config);
    139e:	ce 01       	movw	r24, r28
    13a0:	09 96       	adiw	r24, 0x09	; 9
    13a2:	0e 94 23 09 	call	0x1246	; 0x1246 <TIMER0_init>
	for(i=0;i<n;i++)
    13a6:	19 82       	std	Y+1, r1	; 0x01
    13a8:	1a 82       	std	Y+2, r1	; 0x02
    13aa:	1b 82       	std	Y+3, r1	; 0x03
    13ac:	1c 82       	std	Y+4, r1	; 0x04
    13ae:	1b c0       	rjmp	.+54     	; 0x13e6 <TIMER0_delayMS+0xa8>
	{
		while(BIT_IS_CLEAR(TIFR,OCF0));/*polling when flag is 1 break the loop*/
    13b0:	e8 e5       	ldi	r30, 0x58	; 88
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	82 70       	andi	r24, 0x02	; 2
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	b9 f3       	breq	.-18     	; 0x13b0 <TIMER0_delayMS+0x72>
		SET_BIT(TIFR,OCF0);/*clear the flag cause the polling not like interrupt the hard ware MC clear it */
    13c2:	a8 e5       	ldi	r26, 0x58	; 88
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e8 e5       	ldi	r30, 0x58	; 88
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	82 60       	ori	r24, 0x02	; 2
    13ce:	8c 93       	st	X, r24
{
	Timer0_ConfigType config = {TIMER0_CTC,TIMER0_N8,TIMER0_POLL,249};/*initial value 250 = 0 -->249*/
	uint32 n = msec*1000UL/250;
	uint32 i;
	TIMER0_init(&config);
	for(i=0;i<n;i++)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	ab 81       	ldd	r26, Y+3	; 0x03
    13d6:	bc 81       	ldd	r27, Y+4	; 0x04
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	a1 1d       	adc	r26, r1
    13dc:	b1 1d       	adc	r27, r1
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	ab 83       	std	Y+3, r26	; 0x03
    13e4:	bc 83       	std	Y+4, r27	; 0x04
    13e6:	29 81       	ldd	r18, Y+1	; 0x01
    13e8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ea:	4b 81       	ldd	r20, Y+3	; 0x03
    13ec:	5c 81       	ldd	r21, Y+4	; 0x04
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	af 81       	ldd	r26, Y+7	; 0x07
    13f4:	b8 85       	ldd	r27, Y+8	; 0x08
    13f6:	28 17       	cp	r18, r24
    13f8:	39 07       	cpc	r19, r25
    13fa:	4a 07       	cpc	r20, r26
    13fc:	5b 07       	cpc	r21, r27
    13fe:	c0 f2       	brcs	.-80     	; 0x13b0 <TIMER0_delayMS+0x72>
	{
		while(BIT_IS_CLEAR(TIFR,OCF0));/*polling when flag is 1 break the loop*/
		SET_BIT(TIFR,OCF0);/*clear the flag cause the polling not like interrupt the hard ware MC clear it */
	}
	TIMER0_DeInit(); /* disable timer*/
    1400:	0e 94 0b 0a 	call	0x1416	; 0x1416 <TIMER0_DeInit>
}
    1404:	2e 96       	adiw	r28, 0x0e	; 14
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <TIMER0_DeInit>:

void TIMER0_DeInit()
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    141e:	e2 e5       	ldi	r30, 0x52	; 82
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	10 82       	st	Z, r1
	TCCR0 = 0;
    1424:	e3 e5       	ldi	r30, 0x53	; 83
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	10 82       	st	Z, r1
	TIMSK &= 0b11111100;
    142a:	a9 e5       	ldi	r26, 0x59	; 89
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e9 e5       	ldi	r30, 0x59	; 89
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8c 7f       	andi	r24, 0xFC	; 252
    1436:	8c 93       	st	X, r24
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <__vector_4>:

static volatile void (*g_callBackPtr)(void) = NULL_PTR;/*this global function created
for the set_call_back function cause the pointer is local to the function */

ISR(TIMER2_OVF_vect)
{
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1468:	80 91 5a 02 	lds	r24, 0x025A
    146c:	90 91 5b 02 	lds	r25, 0x025B
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	29 f0       	breq	.+10     	; 0x147e <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1474:	e0 91 5a 02 	lds	r30, 0x025A
    1478:	f0 91 5b 02 	lds	r31, 0x025B
    147c:	09 95       	icall
	}
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    14ce:	80 91 5a 02 	lds	r24, 0x025A
    14d2:	90 91 5b 02 	lds	r25, 0x025B
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	29 f0       	breq	.+10     	; 0x14e4 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    14da:	e0 91 5a 02 	lds	r30, 0x025A
    14de:	f0 91 5b 02 	lds	r31, 0x025B
    14e2:	09 95       	icall
	}
}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <TIMER2_init>:

void TIMER2_init(const Timer2_ConfigType* Config_Ptr)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <TIMER2_init+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <TIMER2_init+0x8>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <TIMER2_init+0xa>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0;
    151c:	e4 e4       	ldi	r30, 0x44	; 68
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	10 82       	st	Z, r1
	switch(Config_Ptr->mode)
    1522:	e9 81       	ldd	r30, Y+1	; 0x01
    1524:	fa 81       	ldd	r31, Y+2	; 0x02
    1526:	80 81       	ld	r24, Z
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3e 83       	std	Y+6, r19	; 0x06
    152e:	2d 83       	std	Y+5, r18	; 0x05
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	31 f0       	breq	.+12     	; 0x1544 <TIMER2_init+0x3a>
    1538:	2d 81       	ldd	r18, Y+5	; 0x05
    153a:	3e 81       	ldd	r19, Y+6	; 0x06
    153c:	21 30       	cpi	r18, 0x01	; 1
    153e:	31 05       	cpc	r19, r1
    1540:	51 f0       	breq	.+20     	; 0x1556 <TIMER2_init+0x4c>
    1542:	17 c0       	rjmp	.+46     	; 0x1572 <TIMER2_init+0x68>
	{
	case TIMER2_NORMAL:
		TCCR2 = (1<<FOC2) | (0x07 & Config_Ptr->prescale);
    1544:	a5 e4       	ldi	r26, 0x45	; 69
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	81 81       	ldd	r24, Z+1	; 0x01
    154e:	87 70       	andi	r24, 0x07	; 7
    1550:	80 68       	ori	r24, 0x80	; 128
    1552:	8c 93       	st	X, r24
    1554:	0e c0       	rjmp	.+28     	; 0x1572 <TIMER2_init+0x68>
		break;
	case TIMER2_CTC:
		TCCR2 = (1<<FOC2) | (1<<WGM21) | (0x07 & Config_Ptr->prescale);
    1556:	a5 e4       	ldi	r26, 0x45	; 69
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e9 81       	ldd	r30, Y+1	; 0x01
    155c:	fa 81       	ldd	r31, Y+2	; 0x02
    155e:	81 81       	ldd	r24, Z+1	; 0x01
    1560:	87 70       	andi	r24, 0x07	; 7
    1562:	88 68       	ori	r24, 0x88	; 136
    1564:	8c 93       	st	X, r24
		OCR2  = Config_Ptr->OCR;
    1566:	a3 e4       	ldi	r26, 0x43	; 67
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e9 81       	ldd	r30, Y+1	; 0x01
    156c:	fa 81       	ldd	r31, Y+2	; 0x02
    156e:	83 81       	ldd	r24, Z+3	; 0x03
    1570:	8c 93       	st	X, r24
		break;
	}
	/* enable interrupts */
	switch(Config_Ptr->interrupt)
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3c 83       	std	Y+4, r19	; 0x04
    157e:	2b 83       	std	Y+3, r18	; 0x03
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	51 f0       	breq	.+20     	; 0x159e <TIMER2_init+0x94>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	69 f0       	breq	.+26     	; 0x15ae <TIMER2_init+0xa4>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	89 f0       	breq	.+34     	; 0x15be <TIMER2_init+0xb4>
    159c:	17 c0       	rjmp	.+46     	; 0x15cc <TIMER2_init+0xc2>
	{
	case TIMER2_OVF:
		TIMSK |= (1<<TOIE2);
    159e:	a9 e5       	ldi	r26, 0x59	; 89
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e9 e5       	ldi	r30, 0x59	; 89
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 64       	ori	r24, 0x40	; 64
    15aa:	8c 93       	st	X, r24
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <TIMER2_init+0xc2>
		break;
	case TIMER2_COMP:
		TIMSK |= (1<<OCIE2);
    15ae:	a9 e5       	ldi	r26, 0x59	; 89
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e9 e5       	ldi	r30, 0x59	; 89
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	8c 93       	st	X, r24
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <TIMER2_init+0xc2>
		break;
	case TIMER2_POLL:
		TIMSK &= 0x3F;/* 0b 0011 1111  polling disable interrupt*/
    15be:	a9 e5       	ldi	r26, 0x59	; 89
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e9 e5       	ldi	r30, 0x59	; 89
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8f 73       	andi	r24, 0x3F	; 63
    15ca:	8c 93       	st	X, r24
		break;
	}



}
    15cc:	26 96       	adiw	r28, 0x06	; 6
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <TIMER2_setCallBack>:

void TIMER2_setCallBack(void(*a_ptr)(void))
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <TIMER2_setCallBack+0x6>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	90 93 5b 02 	sts	0x025B, r25
    15f4:	80 93 5a 02 	sts	0x025A, r24
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <TIMER2_delay_ms>:

void TIMER2_delay_ms(uint16 msec)/*timer2 delay*/
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	2e 97       	sbiw	r28, 0x0e	; 14
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	9e 87       	std	Y+14, r25	; 0x0e
    1618:	8d 87       	std	Y+13, r24	; 0x0d
	Timer2_ConfigType config = {TIMER2_CTC,TIMER2_N8,TIMER2_POLL,249};/*initial value 250 = 0 -->249*/
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	89 87       	std	Y+9, r24	; 0x09
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	8a 87       	std	Y+10, r24	; 0x0a
    1622:	1b 86       	std	Y+11, r1	; 0x0b
    1624:	89 ef       	ldi	r24, 0xF9	; 249
    1626:	8c 87       	std	Y+12, r24	; 0x0c
	uint32 n = msec*1000UL/250;
    1628:	8d 85       	ldd	r24, Y+13	; 0x0d
    162a:	9e 85       	ldd	r25, Y+14	; 0x0e
    162c:	cc 01       	movw	r24, r24
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	28 ee       	ldi	r18, 0xE8	; 232
    1634:	33 e0       	ldi	r19, 0x03	; 3
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	50 e0       	ldi	r21, 0x00	; 0
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	0e 94 22 19 	call	0x3244	; 0x3244 <__mulsi3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	2a ef       	ldi	r18, 0xFA	; 250
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 41 19 	call	0x3282	; 0x3282 <__udivmodsi4>
    1656:	da 01       	movw	r26, r20
    1658:	c9 01       	movw	r24, r18
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	af 83       	std	Y+7, r26	; 0x07
    1660:	b8 87       	std	Y+8, r27	; 0x08
	uint32 i;
	TIMER2_init(&config);
    1662:	ce 01       	movw	r24, r28
    1664:	09 96       	adiw	r24, 0x09	; 9
    1666:	0e 94 85 0a 	call	0x150a	; 0x150a <TIMER2_init>
	for(i=0;i<n;i++)
    166a:	19 82       	std	Y+1, r1	; 0x01
    166c:	1a 82       	std	Y+2, r1	; 0x02
    166e:	1b 82       	std	Y+3, r1	; 0x03
    1670:	1c 82       	std	Y+4, r1	; 0x04
    1672:	1e c0       	rjmp	.+60     	; 0x16b0 <TIMER2_delay_ms+0xae>
	{
		while(BIT_IS_CLEAR(TIFR,OCF2));/*polling when flag is 1 break the loop*/
    1674:	e8 e5       	ldi	r30, 0x58	; 88
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	88 23       	and	r24, r24
    167c:	dc f7       	brge	.-10     	; 0x1674 <TIMER2_delay_ms+0x72>
		SET_BIT(TIFR,OCF2);SET_BIT(TIFR,OCF0);
    167e:	a8 e5       	ldi	r26, 0x58	; 88
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e8 e5       	ldi	r30, 0x58	; 88
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 68       	ori	r24, 0x80	; 128
    168a:	8c 93       	st	X, r24
    168c:	a8 e5       	ldi	r26, 0x58	; 88
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e8 e5       	ldi	r30, 0x58	; 88
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	82 60       	ori	r24, 0x02	; 2
    1698:	8c 93       	st	X, r24
{
	Timer2_ConfigType config = {TIMER2_CTC,TIMER2_N8,TIMER2_POLL,249};/*initial value 250 = 0 -->249*/
	uint32 n = msec*1000UL/250;
	uint32 i;
	TIMER2_init(&config);
	for(i=0;i<n;i++)
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	ab 81       	ldd	r26, Y+3	; 0x03
    16a0:	bc 81       	ldd	r27, Y+4	; 0x04
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	a1 1d       	adc	r26, r1
    16a6:	b1 1d       	adc	r27, r1
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	ab 83       	std	Y+3, r26	; 0x03
    16ae:	bc 83       	std	Y+4, r27	; 0x04
    16b0:	29 81       	ldd	r18, Y+1	; 0x01
    16b2:	3a 81       	ldd	r19, Y+2	; 0x02
    16b4:	4b 81       	ldd	r20, Y+3	; 0x03
    16b6:	5c 81       	ldd	r21, Y+4	; 0x04
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	af 81       	ldd	r26, Y+7	; 0x07
    16be:	b8 85       	ldd	r27, Y+8	; 0x08
    16c0:	28 17       	cp	r18, r24
    16c2:	39 07       	cpc	r19, r25
    16c4:	4a 07       	cpc	r20, r26
    16c6:	5b 07       	cpc	r21, r27
    16c8:	a8 f2       	brcs	.-86     	; 0x1674 <TIMER2_delay_ms+0x72>
	{
		while(BIT_IS_CLEAR(TIFR,OCF2));/*polling when flag is 1 break the loop*/
		SET_BIT(TIFR,OCF2);SET_BIT(TIFR,OCF0);
		/*clear the flag cause the polling not like interrupt the hard ware MC clear it */
	}
	TIMER2_deInit();/* disable timer*/
    16ca:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <TIMER2_deInit>
}
    16ce:	2e 96       	adiw	r28, 0x0e	; 14
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <TIMER2_deInit>:

void TIMER2_deInit()
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0;
    16e8:	e4 e4       	ldi	r30, 0x44	; 68
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	10 82       	st	Z, r1
	TCCR2 = 0;
    16ee:	e5 e4       	ldi	r30, 0x45	; 69
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	10 82       	st	Z, r1
	TIMSK &= 0b00111111;
    16f4:	a9 e5       	ldi	r26, 0x59	; 89
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e9 e5       	ldi	r30, 0x59	; 89
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8f 73       	andi	r24, 0x3F	; 63
    1700:	8c 93       	st	X, r24
}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <PWM_Timer0_Start>:
 * 3. Setup the prescaler with F_CPU/8
 * 4. Setup the compare value based on the required input duty cycle
 * 5. Setup the direction for OC0 as output pin
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Timer0 initial value */
    1718:	e2 e5       	ldi	r30, 0x52	; 82
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	10 82       	st	Z, r1

	OCR0  = ((float)duty_cycle / 100) * 255; /* Set Compare value
    171e:	0c e5       	ldi	r16, 0x5C	; 92
    1720:	10 e0       	ldi	r17, 0x00	; 0
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	48 ec       	ldi	r20, 0xC8	; 200
    1742:	52 e4       	ldi	r21, 0x42	; 66
    1744:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	4f e7       	ldi	r20, 0x7F	; 127
    1756:	53 e4       	ldi	r21, 0x43	; 67
    1758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	f8 01       	movw	r30, r16
    176e:	80 83       	st	Z, r24
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 * Foc=cpu_clk/8(prescaler)*256=500HZ
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1770:	e3 e5       	ldi	r30, 0x53	; 83
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8a e6       	ldi	r24, 0x6A	; 106
    1776:	80 83       	st	Z, r24

	/* Configure PB3/ OC0 as output pin --> pin where the PWM signal is generated from Timer0 */
	GPIO_setupPinDirection(TIMER0_OCO_PORT_ID,TIMER0_OCO_PIN_ID,PIN_OUTPUT);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	63 e0       	ldi	r22, 0x03	; 3
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPinDirection>
}
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	08 95       	ret

0000178e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <GPIO_setupPinDirection+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <GPIO_setupPinDirection+0x8>
    1796:	0f 92       	push	r0
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	6a 83       	std	Y+2, r22	; 0x02
    17a0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	88 30       	cpi	r24, 0x08	; 8
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <GPIO_setupPinDirection+0x1c>
    17a8:	d5 c0       	rjmp	.+426    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	84 30       	cpi	r24, 0x04	; 4
    17ae:	08 f0       	brcs	.+2      	; 0x17b2 <GPIO_setupPinDirection+0x24>
    17b0:	d1 c0       	rjmp	.+418    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3d 83       	std	Y+5, r19	; 0x05
    17ba:	2c 83       	std	Y+4, r18	; 0x04
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <GPIO_setupPinDirection+0x3a>
    17c6:	43 c0       	rjmp	.+134    	; 0x184e <GPIO_setupPinDirection+0xc0>
    17c8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ca:	3d 81       	ldd	r19, Y+5	; 0x05
    17cc:	22 30       	cpi	r18, 0x02	; 2
    17ce:	31 05       	cpc	r19, r1
    17d0:	2c f4       	brge	.+10     	; 0x17dc <GPIO_setupPinDirection+0x4e>
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	71 f0       	breq	.+28     	; 0x17f6 <GPIO_setupPinDirection+0x68>
    17da:	bc c0       	rjmp	.+376    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
    17dc:	2c 81       	ldd	r18, Y+4	; 0x04
    17de:	3d 81       	ldd	r19, Y+5	; 0x05
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <GPIO_setupPinDirection+0x5a>
    17e6:	5f c0       	rjmp	.+190    	; 0x18a6 <GPIO_setupPinDirection+0x118>
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	91 05       	cpc	r25, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <GPIO_setupPinDirection+0x66>
    17f2:	85 c0       	rjmp	.+266    	; 0x18fe <GPIO_setupPinDirection+0x170>
    17f4:	af c0       	rjmp	.+350    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	a1 f4       	brne	.+40     	; 0x1824 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17fc:	aa e3       	ldi	r26, 0x3A	; 58
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ea e3       	ldi	r30, 0x3A	; 58
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <GPIO_setupPinDirection+0x8c>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <GPIO_setupPinDirection+0x88>
    181e:	84 2b       	or	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	98 c0       	rjmp	.+304    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1824:	aa e3       	ldi	r26, 0x3A	; 58
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ea e3       	ldi	r30, 0x3A	; 58
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <GPIO_setupPinDirection+0xb4>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <GPIO_setupPinDirection+0xb0>
    1846:	80 95       	com	r24
    1848:	84 23       	and	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	83 c0       	rjmp	.+262    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	a1 f4       	brne	.+40     	; 0x187c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1854:	a7 e3       	ldi	r26, 0x37	; 55
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e7 e3       	ldi	r30, 0x37	; 55
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <GPIO_setupPinDirection+0xe4>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <GPIO_setupPinDirection+0xe0>
    1876:	84 2b       	or	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	6c c0       	rjmp	.+216    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    187c:	a7 e3       	ldi	r26, 0x37	; 55
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e7 e3       	ldi	r30, 0x37	; 55
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <GPIO_setupPinDirection+0x10c>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <GPIO_setupPinDirection+0x108>
    189e:	80 95       	com	r24
    18a0:	84 23       	and	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	57 c0       	rjmp	.+174    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	a1 f4       	brne	.+40     	; 0x18d4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    18ac:	a4 e3       	ldi	r26, 0x34	; 52
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <GPIO_setupPinDirection+0x13c>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <GPIO_setupPinDirection+0x138>
    18ce:	84 2b       	or	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	40 c0       	rjmp	.+128    	; 0x1954 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18d4:	a4 e3       	ldi	r26, 0x34	; 52
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e4 e3       	ldi	r30, 0x34	; 52
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	48 2f       	mov	r20, r24
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <GPIO_setupPinDirection+0x164>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <GPIO_setupPinDirection+0x160>
    18f6:	80 95       	com	r24
    18f8:	84 23       	and	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	2b c0       	rjmp	.+86     	; 0x1954 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	a1 f4       	brne	.+40     	; 0x192c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1904:	a1 e3       	ldi	r26, 0x31	; 49
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e1 e3       	ldi	r30, 0x31	; 49
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <GPIO_setupPinDirection+0x194>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <GPIO_setupPinDirection+0x190>
    1926:	84 2b       	or	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    192c:	a1 e3       	ldi	r26, 0x31	; 49
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e1 e3       	ldi	r30, 0x31	; 49
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <GPIO_setupPinDirection+0x1bc>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <GPIO_setupPinDirection+0x1b8>
    194e:	80 95       	com	r24
    1950:	84 23       	and	r24, r20
    1952:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <GPIO_writePin+0x6>
    196a:	00 d0       	rcall	.+0      	; 0x196c <GPIO_writePin+0x8>
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	6a 83       	std	Y+2, r22	; 0x02
    1976:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	88 30       	cpi	r24, 0x08	; 8
    197c:	08 f0       	brcs	.+2      	; 0x1980 <GPIO_writePin+0x1c>
    197e:	d5 c0       	rjmp	.+426    	; 0x1b2a <GPIO_writePin+0x1c6>
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	84 30       	cpi	r24, 0x04	; 4
    1984:	08 f0       	brcs	.+2      	; 0x1988 <GPIO_writePin+0x24>
    1986:	d1 c0       	rjmp	.+418    	; 0x1b2a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	3d 83       	std	Y+5, r19	; 0x05
    1990:	2c 83       	std	Y+4, r18	; 0x04
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	9d 81       	ldd	r25, Y+5	; 0x05
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	91 05       	cpc	r25, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <GPIO_writePin+0x3a>
    199c:	43 c0       	rjmp	.+134    	; 0x1a24 <GPIO_writePin+0xc0>
    199e:	2c 81       	ldd	r18, Y+4	; 0x04
    19a0:	3d 81       	ldd	r19, Y+5	; 0x05
    19a2:	22 30       	cpi	r18, 0x02	; 2
    19a4:	31 05       	cpc	r19, r1
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <GPIO_writePin+0x4e>
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	71 f0       	breq	.+28     	; 0x19cc <GPIO_writePin+0x68>
    19b0:	bc c0       	rjmp	.+376    	; 0x1b2a <GPIO_writePin+0x1c6>
    19b2:	2c 81       	ldd	r18, Y+4	; 0x04
    19b4:	3d 81       	ldd	r19, Y+5	; 0x05
    19b6:	22 30       	cpi	r18, 0x02	; 2
    19b8:	31 05       	cpc	r19, r1
    19ba:	09 f4       	brne	.+2      	; 0x19be <GPIO_writePin+0x5a>
    19bc:	5f c0       	rjmp	.+190    	; 0x1a7c <GPIO_writePin+0x118>
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	91 05       	cpc	r25, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <GPIO_writePin+0x66>
    19c8:	85 c0       	rjmp	.+266    	; 0x1ad4 <GPIO_writePin+0x170>
    19ca:	af c0       	rjmp	.+350    	; 0x1b2a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	a1 f4       	brne	.+40     	; 0x19fa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19d2:	ab e3       	ldi	r26, 0x3B	; 59
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	eb e3       	ldi	r30, 0x3B	; 59
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <GPIO_writePin+0x8c>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <GPIO_writePin+0x88>
    19f4:	84 2b       	or	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	98 c0       	rjmp	.+304    	; 0x1b2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19fa:	ab e3       	ldi	r26, 0x3B	; 59
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	eb e3       	ldi	r30, 0x3B	; 59
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <GPIO_writePin+0xb4>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <GPIO_writePin+0xb0>
    1a1c:	80 95       	com	r24
    1a1e:	84 23       	and	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	83 c0       	rjmp	.+262    	; 0x1b2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	a1 f4       	brne	.+40     	; 0x1a52 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a2a:	a8 e3       	ldi	r26, 0x38	; 56
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e8 e3       	ldi	r30, 0x38	; 56
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <GPIO_writePin+0xe4>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <GPIO_writePin+0xe0>
    1a4c:	84 2b       	or	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	6c c0       	rjmp	.+216    	; 0x1b2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a52:	a8 e3       	ldi	r26, 0x38	; 56
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e8 e3       	ldi	r30, 0x38	; 56
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 2e       	mov	r0, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <GPIO_writePin+0x10c>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <GPIO_writePin+0x108>
    1a74:	80 95       	com	r24
    1a76:	84 23       	and	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	57 c0       	rjmp	.+174    	; 0x1b2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	a1 f4       	brne	.+40     	; 0x1aaa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a82:	a5 e3       	ldi	r26, 0x35	; 53
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e5 e3       	ldi	r30, 0x35	; 53
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <GPIO_writePin+0x13c>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <GPIO_writePin+0x138>
    1aa4:	84 2b       	or	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	40 c0       	rjmp	.+128    	; 0x1b2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1aaa:	a5 e3       	ldi	r26, 0x35	; 53
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e5 e3       	ldi	r30, 0x35	; 53
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <GPIO_writePin+0x164>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <GPIO_writePin+0x160>
    1acc:	80 95       	com	r24
    1ace:	84 23       	and	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	2b c0       	rjmp	.+86     	; 0x1b2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	a1 f4       	brne	.+40     	; 0x1b02 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ada:	a2 e3       	ldi	r26, 0x32	; 50
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e2 e3       	ldi	r30, 0x32	; 50
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <GPIO_writePin+0x194>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <GPIO_writePin+0x190>
    1afc:	84 2b       	or	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b02:	a2 e3       	ldi	r26, 0x32	; 50
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e2 e3       	ldi	r30, 0x32	; 50
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 2e       	mov	r0, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <GPIO_writePin+0x1bc>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <GPIO_writePin+0x1b8>
    1b24:	80 95       	com	r24
    1b26:	84 23       	and	r24, r20
    1b28:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <GPIO_readPin+0x6>
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <GPIO_readPin+0x8>
    1b42:	0f 92       	push	r0
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	8a 83       	std	Y+2, r24	; 0x02
    1b4a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b4c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	88 30       	cpi	r24, 0x08	; 8
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <GPIO_readPin+0x1c>
    1b54:	84 c0       	rjmp	.+264    	; 0x1c5e <GPIO_readPin+0x124>
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <GPIO_readPin+0x24>
    1b5c:	80 c0       	rjmp	.+256    	; 0x1c5e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3d 83       	std	Y+5, r19	; 0x05
    1b66:	2c 83       	std	Y+4, r18	; 0x04
    1b68:	4c 81       	ldd	r20, Y+4	; 0x04
    1b6a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b6c:	41 30       	cpi	r20, 0x01	; 1
    1b6e:	51 05       	cpc	r21, r1
    1b70:	79 f1       	breq	.+94     	; 0x1bd0 <GPIO_readPin+0x96>
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
    1b74:	9d 81       	ldd	r25, Y+5	; 0x05
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	91 05       	cpc	r25, r1
    1b7a:	34 f4       	brge	.+12     	; 0x1b88 <GPIO_readPin+0x4e>
    1b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b80:	21 15       	cp	r18, r1
    1b82:	31 05       	cpc	r19, r1
    1b84:	69 f0       	breq	.+26     	; 0x1ba0 <GPIO_readPin+0x66>
    1b86:	6b c0       	rjmp	.+214    	; 0x1c5e <GPIO_readPin+0x124>
    1b88:	4c 81       	ldd	r20, Y+4	; 0x04
    1b8a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b8c:	42 30       	cpi	r20, 0x02	; 2
    1b8e:	51 05       	cpc	r21, r1
    1b90:	b9 f1       	breq	.+110    	; 0x1c00 <GPIO_readPin+0xc6>
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <GPIO_readPin+0x64>
    1b9c:	49 c0       	rjmp	.+146    	; 0x1c30 <GPIO_readPin+0xf6>
    1b9e:	5f c0       	rjmp	.+190    	; 0x1c5e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ba0:	e9 e3       	ldi	r30, 0x39	; 57
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a9 01       	movw	r20, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <GPIO_readPin+0x7e>
    1bb4:	55 95       	asr	r21
    1bb6:	47 95       	ror	r20
    1bb8:	8a 95       	dec	r24
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <GPIO_readPin+0x7a>
    1bbc:	ca 01       	movw	r24, r20
    1bbe:	81 70       	andi	r24, 0x01	; 1
    1bc0:	90 70       	andi	r25, 0x00	; 0
    1bc2:	88 23       	and	r24, r24
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	49 c0       	rjmp	.+146    	; 0x1c5e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bcc:	19 82       	std	Y+1, r1	; 0x01
    1bce:	47 c0       	rjmp	.+142    	; 0x1c5e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1bd0:	e6 e3       	ldi	r30, 0x36	; 54
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <GPIO_readPin+0xae>
    1be4:	55 95       	asr	r21
    1be6:	47 95       	ror	r20
    1be8:	8a 95       	dec	r24
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <GPIO_readPin+0xaa>
    1bec:	ca 01       	movw	r24, r20
    1bee:	81 70       	andi	r24, 0x01	; 1
    1bf0:	90 70       	andi	r25, 0x00	; 0
    1bf2:	88 23       	and	r24, r24
    1bf4:	19 f0       	breq	.+6      	; 0x1bfc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	31 c0       	rjmp	.+98     	; 0x1c5e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	2f c0       	rjmp	.+94     	; 0x1c5e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c00:	e3 e3       	ldi	r30, 0x33	; 51
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a9 01       	movw	r20, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_readPin+0xde>
    1c14:	55 95       	asr	r21
    1c16:	47 95       	ror	r20
    1c18:	8a 95       	dec	r24
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_readPin+0xda>
    1c1c:	ca 01       	movw	r24, r20
    1c1e:	81 70       	andi	r24, 0x01	; 1
    1c20:	90 70       	andi	r25, 0x00	; 0
    1c22:	88 23       	and	r24, r24
    1c24:	19 f0       	breq	.+6      	; 0x1c2c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	19 c0       	rjmp	.+50     	; 0x1c5e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	17 c0       	rjmp	.+46     	; 0x1c5e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c30:	e0 e3       	ldi	r30, 0x30	; 48
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a9 01       	movw	r20, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <GPIO_readPin+0x10e>
    1c44:	55 95       	asr	r21
    1c46:	47 95       	ror	r20
    1c48:	8a 95       	dec	r24
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <GPIO_readPin+0x10a>
    1c4c:	ca 01       	movw	r24, r20
    1c4e:	81 70       	andi	r24, 0x01	; 1
    1c50:	90 70       	andi	r25, 0x00	; 0
    1c52:	88 23       	and	r24, r24
    1c54:	19 f0       	breq	.+6      	; 0x1c5c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c5c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <GPIO_setupPortDirection+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <GPIO_setupPortDirection+0x8>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	84 30       	cpi	r24, 0x04	; 4
    1c84:	90 f5       	brcc	.+100    	; 0x1cea <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	3c 83       	std	Y+4, r19	; 0x04
    1c8e:	2b 83       	std	Y+3, r18	; 0x03
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	91 05       	cpc	r25, r1
    1c98:	d1 f0       	breq	.+52     	; 0x1cce <GPIO_setupPortDirection+0x5e>
    1c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <GPIO_setupPortDirection+0x3e>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	61 f0       	breq	.+24     	; 0x1cc4 <GPIO_setupPortDirection+0x54>
    1cac:	1e c0       	rjmp	.+60     	; 0x1cea <GPIO_setupPortDirection+0x7a>
    1cae:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	81 f0       	breq	.+32     	; 0x1cd8 <GPIO_setupPortDirection+0x68>
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	83 30       	cpi	r24, 0x03	; 3
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	81 f0       	breq	.+32     	; 0x1ce2 <GPIO_setupPortDirection+0x72>
    1cc2:	13 c0       	rjmp	.+38     	; 0x1cea <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1cc4:	ea e3       	ldi	r30, 0x3A	; 58
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	80 83       	st	Z, r24
    1ccc:	0e c0       	rjmp	.+28     	; 0x1cea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1cce:	e7 e3       	ldi	r30, 0x37	; 55
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	80 83       	st	Z, r24
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cd8:	e4 e3       	ldi	r30, 0x34	; 52
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	80 83       	st	Z, r24
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ce2:	e1 e3       	ldi	r30, 0x31	; 49
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <GPIO_writePort+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <GPIO_writePort+0x8>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	84 30       	cpi	r24, 0x04	; 4
    1d0c:	90 f5       	brcc	.+100    	; 0x1d72 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	3c 83       	std	Y+4, r19	; 0x04
    1d16:	2b 83       	std	Y+3, r18	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	91 05       	cpc	r25, r1
    1d20:	d1 f0       	breq	.+52     	; 0x1d56 <GPIO_writePort+0x5e>
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	3c 81       	ldd	r19, Y+4	; 0x04
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	31 05       	cpc	r19, r1
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <GPIO_writePort+0x3e>
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <GPIO_writePort+0x54>
    1d34:	1e c0       	rjmp	.+60     	; 0x1d72 <GPIO_writePort+0x7a>
    1d36:	2b 81       	ldd	r18, Y+3	; 0x03
    1d38:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3a:	22 30       	cpi	r18, 0x02	; 2
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	81 f0       	breq	.+32     	; 0x1d60 <GPIO_writePort+0x68>
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	83 30       	cpi	r24, 0x03	; 3
    1d46:	91 05       	cpc	r25, r1
    1d48:	81 f0       	breq	.+32     	; 0x1d6a <GPIO_writePort+0x72>
    1d4a:	13 c0       	rjmp	.+38     	; 0x1d72 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d4c:	eb e3       	ldi	r30, 0x3B	; 59
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	80 83       	st	Z, r24
    1d54:	0e c0       	rjmp	.+28     	; 0x1d72 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d56:	e8 e3       	ldi	r30, 0x38	; 56
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	80 83       	st	Z, r24
    1d5e:	09 c0       	rjmp	.+18     	; 0x1d72 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d60:	e5 e3       	ldi	r30, 0x35	; 53
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	80 83       	st	Z, r24
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d6a:	e2 e3       	ldi	r30, 0x32	; 50
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <GPIO_readPort+0x6>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <GPIO_readPort+0x8>
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d8e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	84 30       	cpi	r24, 0x04	; 4
    1d94:	90 f5       	brcc	.+100    	; 0x1dfa <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	3c 83       	std	Y+4, r19	; 0x04
    1d9e:	2b 83       	std	Y+3, r18	; 0x03
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	d1 f0       	breq	.+52     	; 0x1dde <GPIO_readPort+0x5e>
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <GPIO_readPort+0x3e>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <GPIO_readPort+0x54>
    1dbc:	1e c0       	rjmp	.+60     	; 0x1dfa <GPIO_readPort+0x7a>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	81 f0       	breq	.+32     	; 0x1de8 <GPIO_readPort+0x68>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	91 05       	cpc	r25, r1
    1dd0:	81 f0       	breq	.+32     	; 0x1df2 <GPIO_readPort+0x72>
    1dd2:	13 c0       	rjmp	.+38     	; 0x1dfa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1dd4:	e9 e3       	ldi	r30, 0x39	; 57
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	0e c0       	rjmp	.+28     	; 0x1dfa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1dde:	e6 e3       	ldi	r30, 0x36	; 54
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1de8:	e3 e3       	ldi	r30, 0x33	; 51
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1df2:	e0 e3       	ldi	r30, 0x30	; 48
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <GIE_Enable>:
#include "avr/io.h"
#include "../../LIB/common_macros.h"


void GIE_Enable(void)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1e12:	af e5       	ldi	r26, 0x5F	; 95
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ef e5       	ldi	r30, 0x5F	; 95
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 68       	ori	r24, 0x80	; 128
    1e1e:	8c 93       	st	X, r24
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <GIE_Disable>:

void GIE_Disable(void)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    1e2e:	af e5       	ldi	r26, 0x5F	; 95
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	ef e5       	ldi	r30, 0x5F	; 95
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	8f 77       	andi	r24, 0x7F	; 127
    1e3a:	8c 93       	st	X, r24
}
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	65 e0       	ldi	r22, 0x05	; 5
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1e54:	83 e0       	ldi	r24, 0x03	; 3
    1e56:	66 e0       	ldi	r22, 0x06	; 6
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	67 e0       	ldi	r22, 0x07	; 7
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	6f ef       	ldi	r22, 0xFF	; 255
    1e6c:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1e70:	88 e3       	ldi	r24, 0x38	; 56
    1e72:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e76:	8c e0       	ldi	r24, 0x0C	; 12
    1e78:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_sendCommand>
}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	e9 97       	sbiw	r28, 0x39	; 57
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	65 e0       	ldi	r22, 0x05	; 5
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	66 e0       	ldi	r22, 0x06	; 6
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e8       	ldi	r26, 0x80	; 128
    1eb8:	bf e3       	ldi	r27, 0x3F	; 63
    1eba:	8d ab       	std	Y+53, r24	; 0x35
    1ebc:	9e ab       	std	Y+54, r25	; 0x36
    1ebe:	af ab       	std	Y+55, r26	; 0x37
    1ec0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a e7       	ldi	r20, 0x7A	; 122
    1ed0:	53 e4       	ldi	r21, 0x43	; 67
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	89 ab       	std	Y+49, r24	; 0x31
    1edc:	9a ab       	std	Y+50, r25	; 0x32
    1ede:	ab ab       	std	Y+51, r26	; 0x33
    1ee0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ee2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	98 ab       	std	Y+48, r25	; 0x30
    1f00:	8f a7       	std	Y+47, r24	; 0x2f
    1f02:	3f c0       	rjmp	.+126    	; 0x1f82 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1f04:	69 a9       	ldd	r22, Y+49	; 0x31
    1f06:	7a a9       	ldd	r23, Y+50	; 0x32
    1f08:	8b a9       	ldd	r24, Y+51	; 0x33
    1f0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f e7       	ldi	r20, 0x7F	; 127
    1f12:	57 e4       	ldi	r21, 0x47	; 71
    1f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f18:	18 16       	cp	r1, r24
    1f1a:	4c f5       	brge	.+82     	; 0x1f6e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f20:	8f a9       	ldd	r24, Y+55	; 0x37
    1f22:	98 ad       	ldd	r25, Y+56	; 0x38
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e2       	ldi	r20, 0x20	; 32
    1f2a:	51 e4       	ldi	r21, 0x41	; 65
    1f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	98 ab       	std	Y+48, r25	; 0x30
    1f42:	8f a7       	std	Y+47, r24	; 0x2f
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <LCD_sendCommand+0xdc>
    1f46:	89 e1       	ldi	r24, 0x19	; 25
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9e a7       	std	Y+46, r25	; 0x2e
    1f4c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f50:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_sendCommand+0xca>
    1f56:	9e a7       	std	Y+46, r25	; 0x2e
    1f58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	98 ab       	std	Y+48, r25	; 0x30
    1f62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f66:	98 a9       	ldd	r25, Y+48	; 0x30
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <LCD_sendCommand+0xbe>
    1f6c:	14 c0       	rjmp	.+40     	; 0x1f96 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f70:	7a a9       	ldd	r23, Y+50	; 0x32
    1f72:	8b a9       	ldd	r24, Y+51	; 0x33
    1f74:	9c a9       	ldd	r25, Y+52	; 0x34
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	98 ab       	std	Y+48, r25	; 0x30
    1f80:	8f a7       	std	Y+47, r24	; 0x2f
    1f82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f84:	98 a9       	ldd	r25, Y+48	; 0x30
    1f86:	9c a7       	std	Y+44, r25	; 0x2c
    1f88:	8b a7       	std	Y+43, r24	; 0x2b
    1f8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <LCD_sendCommand+0x106>
    1f92:	9c a7       	std	Y+44, r25	; 0x2c
    1f94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	67 e0       	ldi	r22, 0x07	; 7
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e8       	ldi	r26, 0x80	; 128
    1fa6:	bf e3       	ldi	r27, 0x3F	; 63
    1fa8:	8f a3       	std	Y+39, r24	; 0x27
    1faa:	98 a7       	std	Y+40, r25	; 0x28
    1fac:	a9 a7       	std	Y+41, r26	; 0x29
    1fae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a e7       	ldi	r20, 0x7A	; 122
    1fbe:	53 e4       	ldi	r21, 0x43	; 67
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8b a3       	std	Y+35, r24	; 0x23
    1fca:	9c a3       	std	Y+36, r25	; 0x24
    1fcc:	ad a3       	std	Y+37, r26	; 0x25
    1fce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9a a3       	std	Y+34, r25	; 0x22
    1fee:	89 a3       	std	Y+33, r24	; 0x21
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1ff2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	6f a1       	ldd	r22, Y+39	; 0x27
    200c:	78 a5       	ldd	r23, Y+40	; 0x28
    200e:	89 a5       	ldd	r24, Y+41	; 0x29
    2010:	9a a5       	ldd	r25, Y+42	; 0x2a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9a a3       	std	Y+34, r25	; 0x22
    2030:	89 a3       	std	Y+33, r24	; 0x21
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <LCD_sendCommand+0x1ca>
    2034:	89 e1       	ldi	r24, 0x19	; 25
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	98 a3       	std	Y+32, r25	; 0x20
    203a:	8f 8f       	std	Y+31, r24	; 0x1f
    203c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    203e:	98 a1       	ldd	r25, Y+32	; 0x20
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_sendCommand+0x1b8>
    2044:	98 a3       	std	Y+32, r25	; 0x20
    2046:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	89 a1       	ldd	r24, Y+33	; 0x21
    204a:	9a a1       	ldd	r25, Y+34	; 0x22
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9a a3       	std	Y+34, r25	; 0x22
    2050:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	89 a1       	ldd	r24, Y+33	; 0x21
    2054:	9a a1       	ldd	r25, Y+34	; 0x22
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	69 f7       	brne	.-38     	; 0x2034 <LCD_sendCommand+0x1ac>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	6b a1       	ldd	r22, Y+35	; 0x23
    205e:	7c a1       	ldd	r23, Y+36	; 0x24
    2060:	8d a1       	ldd	r24, Y+37	; 0x25
    2062:	9e a1       	ldd	r25, Y+38	; 0x26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9a a3       	std	Y+34, r25	; 0x22
    206e:	89 a3       	std	Y+33, r24	; 0x21
    2070:	89 a1       	ldd	r24, Y+33	; 0x21
    2072:	9a a1       	ldd	r25, Y+34	; 0x22
    2074:	9e 8f       	std	Y+30, r25	; 0x1e
    2076:	8d 8f       	std	Y+29, r24	; 0x1d
    2078:	8d 8d       	ldd	r24, Y+29	; 0x1d
    207a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_sendCommand+0x1f4>
    2080:	9e 8f       	std	Y+30, r25	; 0x1e
    2082:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	69 ad       	ldd	r22, Y+57	; 0x39
    2088:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <GPIO_writePort>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 e8       	ldi	r26, 0x80	; 128
    2092:	bf e3       	ldi	r27, 0x3F	; 63
    2094:	89 8f       	std	Y+25, r24	; 0x19
    2096:	9a 8f       	std	Y+26, r25	; 0x1a
    2098:	ab 8f       	std	Y+27, r26	; 0x1b
    209a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	69 8d       	ldd	r22, Y+25	; 0x19
    209e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a e7       	ldi	r20, 0x7A	; 122
    20aa:	53 e4       	ldi	r21, 0x43	; 67
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	8d 8b       	std	Y+21, r24	; 0x15
    20b6:	9e 8b       	std	Y+22, r25	; 0x16
    20b8:	af 8b       	std	Y+23, r26	; 0x17
    20ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20bc:	6d 89       	ldd	r22, Y+21	; 0x15
    20be:	7e 89       	ldd	r23, Y+22	; 0x16
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e8       	ldi	r20, 0x80	; 128
    20ca:	5f e3       	ldi	r21, 0x3F	; 63
    20cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	2c f4       	brge	.+10     	; 0x20de <LCD_sendCommand+0x256>
		__ticks = 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9c 8b       	std	Y+20, r25	; 0x14
    20da:	8b 8b       	std	Y+19, r24	; 0x13
    20dc:	3f c0       	rjmp	.+126    	; 0x215c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    20de:	6d 89       	ldd	r22, Y+21	; 0x15
    20e0:	7e 89       	ldd	r23, Y+22	; 0x16
    20e2:	8f 89       	ldd	r24, Y+23	; 0x17
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	4f e7       	ldi	r20, 0x7F	; 127
    20ec:	57 e4       	ldi	r21, 0x47	; 71
    20ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	4c f5       	brge	.+82     	; 0x2148 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	69 8d       	ldd	r22, Y+25	; 0x19
    20f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e2       	ldi	r20, 0x20	; 32
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
    211e:	0f c0       	rjmp	.+30     	; 0x213e <LCD_sendCommand+0x2b6>
    2120:	89 e1       	ldi	r24, 0x19	; 25
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9a 8b       	std	Y+18, r25	; 0x12
    2126:	89 8b       	std	Y+17, r24	; 0x11
    2128:	89 89       	ldd	r24, Y+17	; 0x11
    212a:	9a 89       	ldd	r25, Y+18	; 0x12
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_sendCommand+0x2a4>
    2130:	9a 8b       	std	Y+18, r25	; 0x12
    2132:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2134:	8b 89       	ldd	r24, Y+19	; 0x13
    2136:	9c 89       	ldd	r25, Y+20	; 0x14
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	9c 8b       	std	Y+20, r25	; 0x14
    213c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	8b 89       	ldd	r24, Y+19	; 0x13
    2140:	9c 89       	ldd	r25, Y+20	; 0x14
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	69 f7       	brne	.-38     	; 0x2120 <LCD_sendCommand+0x298>
    2146:	14 c0       	rjmp	.+40     	; 0x2170 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	6d 89       	ldd	r22, Y+21	; 0x15
    214a:	7e 89       	ldd	r23, Y+22	; 0x16
    214c:	8f 89       	ldd	r24, Y+23	; 0x17
    214e:	98 8d       	ldd	r25, Y+24	; 0x18
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9c 8b       	std	Y+20, r25	; 0x14
    215a:	8b 8b       	std	Y+19, r24	; 0x13
    215c:	8b 89       	ldd	r24, Y+19	; 0x13
    215e:	9c 89       	ldd	r25, Y+20	; 0x14
    2160:	98 8b       	std	Y+16, r25	; 0x10
    2162:	8f 87       	std	Y+15, r24	; 0x0f
    2164:	8f 85       	ldd	r24, Y+15	; 0x0f
    2166:	98 89       	ldd	r25, Y+16	; 0x10
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_sendCommand+0x2e0>
    216c:	98 8b       	std	Y+16, r25	; 0x10
    216e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	67 e0       	ldi	r22, 0x07	; 7
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e8       	ldi	r26, 0x80	; 128
    2180:	bf e3       	ldi	r27, 0x3F	; 63
    2182:	8b 87       	std	Y+11, r24	; 0x0b
    2184:	9c 87       	std	Y+12, r25	; 0x0c
    2186:	ad 87       	std	Y+13, r26	; 0x0d
    2188:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	6b 85       	ldd	r22, Y+11	; 0x0b
    218c:	7c 85       	ldd	r23, Y+12	; 0x0c
    218e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2190:	9e 85       	ldd	r25, Y+14	; 0x0e
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a e7       	ldi	r20, 0x7A	; 122
    2198:	53 e4       	ldi	r21, 0x43	; 67
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8f 83       	std	Y+7, r24	; 0x07
    21a4:	98 87       	std	Y+8, r25	; 0x08
    21a6:	a9 87       	std	Y+9, r26	; 0x09
    21a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21aa:	6f 81       	ldd	r22, Y+7	; 0x07
    21ac:	78 85       	ldd	r23, Y+8	; 0x08
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	2c f4       	brge	.+10     	; 0x21cc <LCD_sendCommand+0x344>
		__ticks = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
    21ca:	3f c0       	rjmp	.+126    	; 0x224a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    21cc:	6f 81       	ldd	r22, Y+7	; 0x07
    21ce:	78 85       	ldd	r23, Y+8	; 0x08
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	4c f5       	brge	.+82     	; 0x2236 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_sendCommand+0x3a4>
    220e:	89 e1       	ldi	r24, 0x19	; 25
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9c 83       	std	Y+4, r25	; 0x04
    2214:	8b 83       	std	Y+3, r24	; 0x03
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_sendCommand+0x392>
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
    2224:	9e 81       	ldd	r25, Y+6	; 0x06
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f7       	brne	.-38     	; 0x220e <LCD_sendCommand+0x386>
    2234:	14 c0       	rjmp	.+40     	; 0x225e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	6f 81       	ldd	r22, Y+7	; 0x07
    2238:	78 85       	ldd	r23, Y+8	; 0x08
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	9a 83       	std	Y+2, r25	; 0x02
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_sendCommand+0x3ce>
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    225e:	e9 96       	adiw	r28, 0x39	; 57
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	e9 97       	sbiw	r28, 0x39	; 57
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	65 e0       	ldi	r22, 0x05	; 5
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	66 e0       	ldi	r22, 0x06	; 6
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a0 e8       	ldi	r26, 0x80	; 128
    22a0:	bf e3       	ldi	r27, 0x3F	; 63
    22a2:	8d ab       	std	Y+53, r24	; 0x35
    22a4:	9e ab       	std	Y+54, r25	; 0x36
    22a6:	af ab       	std	Y+55, r26	; 0x37
    22a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22aa:	6d a9       	ldd	r22, Y+53	; 0x35
    22ac:	7e a9       	ldd	r23, Y+54	; 0x36
    22ae:	8f a9       	ldd	r24, Y+55	; 0x37
    22b0:	98 ad       	ldd	r25, Y+56	; 0x38
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	4a e7       	ldi	r20, 0x7A	; 122
    22b8:	53 e4       	ldi	r21, 0x43	; 67
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	89 ab       	std	Y+49, r24	; 0x31
    22c4:	9a ab       	std	Y+50, r25	; 0x32
    22c6:	ab ab       	std	Y+51, r26	; 0x33
    22c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22ca:	69 a9       	ldd	r22, Y+49	; 0x31
    22cc:	7a a9       	ldd	r23, Y+50	; 0x32
    22ce:	8b a9       	ldd	r24, Y+51	; 0x33
    22d0:	9c a9       	ldd	r25, Y+52	; 0x34
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e8       	ldi	r20, 0x80	; 128
    22d8:	5f e3       	ldi	r21, 0x3F	; 63
    22da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22de:	88 23       	and	r24, r24
    22e0:	2c f4       	brge	.+10     	; 0x22ec <LCD_displayCharacter+0x7c>
		__ticks = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	98 ab       	std	Y+48, r25	; 0x30
    22e8:	8f a7       	std	Y+47, r24	; 0x2f
    22ea:	3f c0       	rjmp	.+126    	; 0x236a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    22ec:	69 a9       	ldd	r22, Y+49	; 0x31
    22ee:	7a a9       	ldd	r23, Y+50	; 0x32
    22f0:	8b a9       	ldd	r24, Y+51	; 0x33
    22f2:	9c a9       	ldd	r25, Y+52	; 0x34
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	3f ef       	ldi	r19, 0xFF	; 255
    22f8:	4f e7       	ldi	r20, 0x7F	; 127
    22fa:	57 e4       	ldi	r21, 0x47	; 71
    22fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2300:	18 16       	cp	r1, r24
    2302:	4c f5       	brge	.+82     	; 0x2356 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2304:	6d a9       	ldd	r22, Y+53	; 0x35
    2306:	7e a9       	ldd	r23, Y+54	; 0x36
    2308:	8f a9       	ldd	r24, Y+55	; 0x37
    230a:	98 ad       	ldd	r25, Y+56	; 0x38
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e2       	ldi	r20, 0x20	; 32
    2312:	51 e4       	ldi	r21, 0x41	; 65
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
    232c:	0f c0       	rjmp	.+30     	; 0x234c <LCD_displayCharacter+0xdc>
    232e:	89 e1       	ldi	r24, 0x19	; 25
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9e a7       	std	Y+46, r25	; 0x2e
    2334:	8d a7       	std	Y+45, r24	; 0x2d
    2336:	8d a5       	ldd	r24, Y+45	; 0x2d
    2338:	9e a5       	ldd	r25, Y+46	; 0x2e
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_displayCharacter+0xca>
    233e:	9e a7       	std	Y+46, r25	; 0x2e
    2340:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2342:	8f a5       	ldd	r24, Y+47	; 0x2f
    2344:	98 a9       	ldd	r25, Y+48	; 0x30
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	98 ab       	std	Y+48, r25	; 0x30
    234a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234c:	8f a5       	ldd	r24, Y+47	; 0x2f
    234e:	98 a9       	ldd	r25, Y+48	; 0x30
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	69 f7       	brne	.-38     	; 0x232e <LCD_displayCharacter+0xbe>
    2354:	14 c0       	rjmp	.+40     	; 0x237e <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2356:	69 a9       	ldd	r22, Y+49	; 0x31
    2358:	7a a9       	ldd	r23, Y+50	; 0x32
    235a:	8b a9       	ldd	r24, Y+51	; 0x33
    235c:	9c a9       	ldd	r25, Y+52	; 0x34
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	98 ab       	std	Y+48, r25	; 0x30
    2368:	8f a7       	std	Y+47, r24	; 0x2f
    236a:	8f a5       	ldd	r24, Y+47	; 0x2f
    236c:	98 a9       	ldd	r25, Y+48	; 0x30
    236e:	9c a7       	std	Y+44, r25	; 0x2c
    2370:	8b a7       	std	Y+43, r24	; 0x2b
    2372:	8b a5       	ldd	r24, Y+43	; 0x2b
    2374:	9c a5       	ldd	r25, Y+44	; 0x2c
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_displayCharacter+0x106>
    237a:	9c a7       	std	Y+44, r25	; 0x2c
    237c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	67 e0       	ldi	r22, 0x07	; 7
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e8       	ldi	r26, 0x80	; 128
    238e:	bf e3       	ldi	r27, 0x3F	; 63
    2390:	8f a3       	std	Y+39, r24	; 0x27
    2392:	98 a7       	std	Y+40, r25	; 0x28
    2394:	a9 a7       	std	Y+41, r26	; 0x29
    2396:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	6f a1       	ldd	r22, Y+39	; 0x27
    239a:	78 a5       	ldd	r23, Y+40	; 0x28
    239c:	89 a5       	ldd	r24, Y+41	; 0x29
    239e:	9a a5       	ldd	r25, Y+42	; 0x2a
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a e7       	ldi	r20, 0x7A	; 122
    23a6:	53 e4       	ldi	r21, 0x43	; 67
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8b a3       	std	Y+35, r24	; 0x23
    23b2:	9c a3       	std	Y+36, r25	; 0x24
    23b4:	ad a3       	std	Y+37, r26	; 0x25
    23b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23b8:	6b a1       	ldd	r22, Y+35	; 0x23
    23ba:	7c a1       	ldd	r23, Y+36	; 0x24
    23bc:	8d a1       	ldd	r24, Y+37	; 0x25
    23be:	9e a1       	ldd	r25, Y+38	; 0x26
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <LCD_displayCharacter+0x16a>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9a a3       	std	Y+34, r25	; 0x22
    23d6:	89 a3       	std	Y+33, r24	; 0x21
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    23da:	6b a1       	ldd	r22, Y+35	; 0x23
    23dc:	7c a1       	ldd	r23, Y+36	; 0x24
    23de:	8d a1       	ldd	r24, Y+37	; 0x25
    23e0:	9e a1       	ldd	r25, Y+38	; 0x26
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	6f a1       	ldd	r22, Y+39	; 0x27
    23f4:	78 a5       	ldd	r23, Y+40	; 0x28
    23f6:	89 a5       	ldd	r24, Y+41	; 0x29
    23f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9a a3       	std	Y+34, r25	; 0x22
    2418:	89 a3       	std	Y+33, r24	; 0x21
    241a:	0f c0       	rjmp	.+30     	; 0x243a <LCD_displayCharacter+0x1ca>
    241c:	89 e1       	ldi	r24, 0x19	; 25
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	98 a3       	std	Y+32, r25	; 0x20
    2422:	8f 8f       	std	Y+31, r24	; 0x1f
    2424:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2426:	98 a1       	ldd	r25, Y+32	; 0x20
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_displayCharacter+0x1b8>
    242c:	98 a3       	std	Y+32, r25	; 0x20
    242e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	89 a1       	ldd	r24, Y+33	; 0x21
    2432:	9a a1       	ldd	r25, Y+34	; 0x22
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9a a3       	std	Y+34, r25	; 0x22
    2438:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	89 a1       	ldd	r24, Y+33	; 0x21
    243c:	9a a1       	ldd	r25, Y+34	; 0x22
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <LCD_displayCharacter+0x1ac>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	6b a1       	ldd	r22, Y+35	; 0x23
    2446:	7c a1       	ldd	r23, Y+36	; 0x24
    2448:	8d a1       	ldd	r24, Y+37	; 0x25
    244a:	9e a1       	ldd	r25, Y+38	; 0x26
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9a a3       	std	Y+34, r25	; 0x22
    2456:	89 a3       	std	Y+33, r24	; 0x21
    2458:	89 a1       	ldd	r24, Y+33	; 0x21
    245a:	9a a1       	ldd	r25, Y+34	; 0x22
    245c:	9e 8f       	std	Y+30, r25	; 0x1e
    245e:	8d 8f       	std	Y+29, r24	; 0x1d
    2460:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2462:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <LCD_displayCharacter+0x1f4>
    2468:	9e 8f       	std	Y+30, r25	; 0x1e
    246a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	69 ad       	ldd	r22, Y+57	; 0x39
    2470:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <GPIO_writePort>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e8       	ldi	r26, 0x80	; 128
    247a:	bf e3       	ldi	r27, 0x3F	; 63
    247c:	89 8f       	std	Y+25, r24	; 0x19
    247e:	9a 8f       	std	Y+26, r25	; 0x1a
    2480:	ab 8f       	std	Y+27, r26	; 0x1b
    2482:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	69 8d       	ldd	r22, Y+25	; 0x19
    2486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a e7       	ldi	r20, 0x7A	; 122
    2492:	53 e4       	ldi	r21, 0x43	; 67
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8d 8b       	std	Y+21, r24	; 0x15
    249e:	9e 8b       	std	Y+22, r25	; 0x16
    24a0:	af 8b       	std	Y+23, r26	; 0x17
    24a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24a4:	6d 89       	ldd	r22, Y+21	; 0x15
    24a6:	7e 89       	ldd	r23, Y+22	; 0x16
    24a8:	8f 89       	ldd	r24, Y+23	; 0x17
    24aa:	98 8d       	ldd	r25, Y+24	; 0x18
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <LCD_displayCharacter+0x256>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9c 8b       	std	Y+20, r25	; 0x14
    24c2:	8b 8b       	std	Y+19, r24	; 0x13
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    24c6:	6d 89       	ldd	r22, Y+21	; 0x15
    24c8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ca:	8f 89       	ldd	r24, Y+23	; 0x17
    24cc:	98 8d       	ldd	r25, Y+24	; 0x18
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	69 8d       	ldd	r22, Y+25	; 0x19
    24e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9c 8b       	std	Y+20, r25	; 0x14
    2504:	8b 8b       	std	Y+19, r24	; 0x13
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <LCD_displayCharacter+0x2b6>
    2508:	89 e1       	ldi	r24, 0x19	; 25
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9a 8b       	std	Y+18, r25	; 0x12
    250e:	89 8b       	std	Y+17, r24	; 0x11
    2510:	89 89       	ldd	r24, Y+17	; 0x11
    2512:	9a 89       	ldd	r25, Y+18	; 0x12
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_displayCharacter+0x2a4>
    2518:	9a 8b       	std	Y+18, r25	; 0x12
    251a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	8b 89       	ldd	r24, Y+19	; 0x13
    251e:	9c 89       	ldd	r25, Y+20	; 0x14
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9c 8b       	std	Y+20, r25	; 0x14
    2524:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	8b 89       	ldd	r24, Y+19	; 0x13
    2528:	9c 89       	ldd	r25, Y+20	; 0x14
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <LCD_displayCharacter+0x298>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	6d 89       	ldd	r22, Y+21	; 0x15
    2532:	7e 89       	ldd	r23, Y+22	; 0x16
    2534:	8f 89       	ldd	r24, Y+23	; 0x17
    2536:	98 8d       	ldd	r25, Y+24	; 0x18
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9c 8b       	std	Y+20, r25	; 0x14
    2542:	8b 8b       	std	Y+19, r24	; 0x13
    2544:	8b 89       	ldd	r24, Y+19	; 0x13
    2546:	9c 89       	ldd	r25, Y+20	; 0x14
    2548:	98 8b       	std	Y+16, r25	; 0x10
    254a:	8f 87       	std	Y+15, r24	; 0x0f
    254c:	8f 85       	ldd	r24, Y+15	; 0x0f
    254e:	98 89       	ldd	r25, Y+16	; 0x10
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_displayCharacter+0x2e0>
    2554:	98 8b       	std	Y+16, r25	; 0x10
    2556:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2558:	83 e0       	ldi	r24, 0x03	; 3
    255a:	67 e0       	ldi	r22, 0x07	; 7
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a0 e8       	ldi	r26, 0x80	; 128
    2568:	bf e3       	ldi	r27, 0x3F	; 63
    256a:	8b 87       	std	Y+11, r24	; 0x0b
    256c:	9c 87       	std	Y+12, r25	; 0x0c
    256e:	ad 87       	std	Y+13, r26	; 0x0d
    2570:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a e7       	ldi	r20, 0x7A	; 122
    2580:	53 e4       	ldi	r21, 0x43	; 67
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	8f 83       	std	Y+7, r24	; 0x07
    258c:	98 87       	std	Y+8, r25	; 0x08
    258e:	a9 87       	std	Y+9, r26	; 0x09
    2590:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2592:	6f 81       	ldd	r22, Y+7	; 0x07
    2594:	78 85       	ldd	r23, Y+8	; 0x08
    2596:	89 85       	ldd	r24, Y+9	; 0x09
    2598:	9a 85       	ldd	r25, Y+10	; 0x0a
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <LCD_displayCharacter+0x344>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9e 83       	std	Y+6, r25	; 0x06
    25b0:	8d 83       	std	Y+5, r24	; 0x05
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    25b4:	6f 81       	ldd	r22, Y+7	; 0x07
    25b6:	78 85       	ldd	r23, Y+8	; 0x08
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9e 83       	std	Y+6, r25	; 0x06
    25f2:	8d 83       	std	Y+5, r24	; 0x05
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <LCD_displayCharacter+0x3a4>
    25f6:	89 e1       	ldi	r24, 0x19	; 25
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9c 83       	std	Y+4, r25	; 0x04
    25fc:	8b 83       	std	Y+3, r24	; 0x03
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_displayCharacter+0x392>
    2606:	9c 83       	std	Y+4, r25	; 0x04
    2608:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <LCD_displayCharacter+0x386>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	6f 81       	ldd	r22, Y+7	; 0x07
    2620:	78 85       	ldd	r23, Y+8	; 0x08
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_displayCharacter+0x3ce>
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2646:	e9 96       	adiw	r28, 0x39	; 57
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <LCD_displayString+0x6>
    265e:	0f 92       	push	r0
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9b 83       	std	Y+3, r25	; 0x03
    2666:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2668:	19 82       	std	Y+1, r1	; 0x01
    266a:	0e c0       	rjmp	.+28     	; 0x2688 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	9b 81       	ldd	r25, Y+3	; 0x03
    2676:	fc 01       	movw	r30, r24
    2678:	e2 0f       	add	r30, r18
    267a:	f3 1f       	adc	r31, r19
    267c:	80 81       	ld	r24, Z
    267e:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_displayCharacter>
		i++;
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	8f 5f       	subi	r24, 0xFF	; 255
    2686:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	80 81       	ld	r24, Z
    269a:	88 23       	and	r24, r24
    269c:	39 f7       	brne	.-50     	; 0x266c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <LCD_moveCursor+0x6>
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <LCD_moveCursor+0x8>
    26b2:	0f 92       	push	r0
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	8a 83       	std	Y+2, r24	; 0x02
    26ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	3d 83       	std	Y+5, r19	; 0x05
    26c4:	2c 83       	std	Y+4, r18	; 0x04
    26c6:	8c 81       	ldd	r24, Y+4	; 0x04
    26c8:	9d 81       	ldd	r25, Y+5	; 0x05
    26ca:	81 30       	cpi	r24, 0x01	; 1
    26cc:	91 05       	cpc	r25, r1
    26ce:	c1 f0       	breq	.+48     	; 0x2700 <LCD_moveCursor+0x56>
    26d0:	2c 81       	ldd	r18, Y+4	; 0x04
    26d2:	3d 81       	ldd	r19, Y+5	; 0x05
    26d4:	22 30       	cpi	r18, 0x02	; 2
    26d6:	31 05       	cpc	r19, r1
    26d8:	2c f4       	brge	.+10     	; 0x26e4 <LCD_moveCursor+0x3a>
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	9d 81       	ldd	r25, Y+5	; 0x05
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	61 f0       	breq	.+24     	; 0x26fa <LCD_moveCursor+0x50>
    26e2:	19 c0       	rjmp	.+50     	; 0x2716 <LCD_moveCursor+0x6c>
    26e4:	2c 81       	ldd	r18, Y+4	; 0x04
    26e6:	3d 81       	ldd	r19, Y+5	; 0x05
    26e8:	22 30       	cpi	r18, 0x02	; 2
    26ea:	31 05       	cpc	r19, r1
    26ec:	69 f0       	breq	.+26     	; 0x2708 <LCD_moveCursor+0x5e>
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	9d 81       	ldd	r25, Y+5	; 0x05
    26f2:	83 30       	cpi	r24, 0x03	; 3
    26f4:	91 05       	cpc	r25, r1
    26f6:	61 f0       	breq	.+24     	; 0x2710 <LCD_moveCursor+0x66>
    26f8:	0e c0       	rjmp	.+28     	; 0x2716 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	89 83       	std	Y+1, r24	; 0x01
    26fe:	0b c0       	rjmp	.+22     	; 0x2716 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	80 5c       	subi	r24, 0xC0	; 192
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	07 c0       	rjmp	.+14     	; 0x2716 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	80 5f       	subi	r24, 0xF0	; 240
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	80 5b       	subi	r24, 0xB0	; 176
    2714:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	80 68       	ori	r24, 0x80	; 128
    271a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_sendCommand>
}
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <LCD_displayStringRowColumn+0x6>
    2734:	00 d0       	rcall	.+0      	; 0x2736 <LCD_displayStringRowColumn+0x8>
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	6a 83       	std	Y+2, r22	; 0x02
    273e:	5c 83       	std	Y+4, r21	; 0x04
    2740:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	6a 81       	ldd	r22, Y+2	; 0x02
    2746:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <LCD_displayNumber>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_displayNumber(int data)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	62 97       	sbiw	r28, 0x12	; 18
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	9a 8b       	std	Y+18, r25	; 0x12
    2776:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2778:	89 89       	ldd	r24, Y+17	; 0x11
    277a:	9a 89       	ldd	r25, Y+18	; 0x12
    277c:	9e 01       	movw	r18, r28
    277e:	2f 5f       	subi	r18, 0xFF	; 255
    2780:	3f 4f       	sbci	r19, 0xFF	; 255
    2782:	b9 01       	movw	r22, r18
    2784:	4a e0       	ldi	r20, 0x0A	; 10
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	0e 94 9a 19 	call	0x3334	; 0x3334 <itoa>
   LCD_displayString(buff); /* Display the string */
    278c:	ce 01       	movw	r24, r28
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
}
    2794:	62 96       	adiw	r28, 0x12	; 18
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_sendCommand>
}
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <KEYPAD_getPressedKey+0x6>
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    27c6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    27c8:	1b 82       	std	Y+3, r1	; 0x03
    27ca:	43 c0       	rjmp	.+134    	; 0x2852 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	98 2f       	mov	r25, r24
    27d8:	9c 5f       	subi	r25, 0xFC	; 252
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	69 2f       	mov	r22, r25
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9c 01       	movw	r18, r24
    27ec:	2c 5f       	subi	r18, 0xFC	; 252
    27ee:	3f 4f       	sbci	r19, 0xFF	; 255
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <KEYPAD_getPressedKey+0x40>
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	2a 95       	dec	r18
    27fc:	e2 f7       	brpl	.-8      	; 0x27f6 <KEYPAD_getPressedKey+0x3c>
    27fe:	80 95       	com	r24
    2800:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	69 81       	ldd	r22, Y+1	; 0x01
    2806:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    280a:	1a 82       	std	Y+2, r1	; 0x02
    280c:	1c c0       	rjmp	.+56     	; 0x2846 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	6a 81       	ldd	r22, Y+2	; 0x02
    2812:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <GPIO_readPin>
    2816:	88 23       	and	r24, r24
    2818:	99 f4       	brne	.+38     	; 0x2840 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	98 2f       	mov	r25, r24
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	89 0f       	add	r24, r25
    282e:	8f 5f       	subi	r24, 0xFF	; 255
    2830:	0e 94 2e 14 	call	0x285c	; 0x285c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	8a 83       	std	Y+2, r24	; 0x02
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	84 30       	cpi	r24, 0x04	; 4
    284a:	08 f3       	brcs	.-62     	; 0x280e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	8f 5f       	subi	r24, 0xFF	; 255
    2850:	8b 83       	std	Y+3, r24	; 0x03
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	84 30       	cpi	r24, 0x04	; 4
    2856:	08 f4       	brcc	.+2      	; 0x285a <KEYPAD_getPressedKey+0xa0>
    2858:	b9 cf       	rjmp	.-142    	; 0x27cc <KEYPAD_getPressedKey+0x12>
    285a:	b6 cf       	rjmp	.-148    	; 0x27c8 <KEYPAD_getPressedKey+0xe>

0000285c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	00 d0       	rcall	.+0      	; 0x2862 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2862:	00 d0       	rcall	.+0      	; 0x2864 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    286a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	3c 83       	std	Y+4, r19	; 0x04
    2874:	2b 83       	std	Y+3, r18	; 0x03
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	88 30       	cpi	r24, 0x08	; 8
    287c:	91 05       	cpc	r25, r1
    287e:	09 f4       	brne	.+2      	; 0x2882 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2880:	70 c0       	rjmp	.+224    	; 0x2962 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2882:	2b 81       	ldd	r18, Y+3	; 0x03
    2884:	3c 81       	ldd	r19, Y+4	; 0x04
    2886:	29 30       	cpi	r18, 0x09	; 9
    2888:	31 05       	cpc	r19, r1
    288a:	5c f5       	brge	.+86     	; 0x28e2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	84 30       	cpi	r24, 0x04	; 4
    2892:	91 05       	cpc	r25, r1
    2894:	09 f4       	brne	.+2      	; 0x2898 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2896:	59 c0       	rjmp	.+178    	; 0x294a <KEYPAD_4x4_adjustKeyNumber+0xee>
    2898:	2b 81       	ldd	r18, Y+3	; 0x03
    289a:	3c 81       	ldd	r19, Y+4	; 0x04
    289c:	25 30       	cpi	r18, 0x05	; 5
    289e:	31 05       	cpc	r19, r1
    28a0:	9c f4       	brge	.+38     	; 0x28c8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	9c 81       	ldd	r25, Y+4	; 0x04
    28a6:	82 30       	cpi	r24, 0x02	; 2
    28a8:	91 05       	cpc	r25, r1
    28aa:	09 f4       	brne	.+2      	; 0x28ae <KEYPAD_4x4_adjustKeyNumber+0x52>
    28ac:	48 c0       	rjmp	.+144    	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    28ae:	2b 81       	ldd	r18, Y+3	; 0x03
    28b0:	3c 81       	ldd	r19, Y+4	; 0x04
    28b2:	23 30       	cpi	r18, 0x03	; 3
    28b4:	31 05       	cpc	r19, r1
    28b6:	0c f0       	brlt	.+2      	; 0x28ba <KEYPAD_4x4_adjustKeyNumber+0x5e>
    28b8:	45 c0       	rjmp	.+138    	; 0x2944 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	91 05       	cpc	r25, r1
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    28c4:	39 c0       	rjmp	.+114    	; 0x2938 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    28c6:	67 c0       	rjmp	.+206    	; 0x2996 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    28c8:	2b 81       	ldd	r18, Y+3	; 0x03
    28ca:	3c 81       	ldd	r19, Y+4	; 0x04
    28cc:	26 30       	cpi	r18, 0x06	; 6
    28ce:	31 05       	cpc	r19, r1
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    28d2:	41 c0       	rjmp	.+130    	; 0x2956 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	9c 81       	ldd	r25, Y+4	; 0x04
    28d8:	87 30       	cpi	r24, 0x07	; 7
    28da:	91 05       	cpc	r25, r1
    28dc:	0c f0       	brlt	.+2      	; 0x28e0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    28de:	3e c0       	rjmp	.+124    	; 0x295c <KEYPAD_4x4_adjustKeyNumber+0x100>
    28e0:	37 c0       	rjmp	.+110    	; 0x2950 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    28e2:	2b 81       	ldd	r18, Y+3	; 0x03
    28e4:	3c 81       	ldd	r19, Y+4	; 0x04
    28e6:	2c 30       	cpi	r18, 0x0C	; 12
    28e8:	31 05       	cpc	r19, r1
    28ea:	09 f4       	brne	.+2      	; 0x28ee <KEYPAD_4x4_adjustKeyNumber+0x92>
    28ec:	46 c0       	rjmp	.+140    	; 0x297a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	9c 81       	ldd	r25, Y+4	; 0x04
    28f2:	8d 30       	cpi	r24, 0x0D	; 13
    28f4:	91 05       	cpc	r25, r1
    28f6:	5c f4       	brge	.+22     	; 0x290e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    28f8:	2b 81       	ldd	r18, Y+3	; 0x03
    28fa:	3c 81       	ldd	r19, Y+4	; 0x04
    28fc:	2a 30       	cpi	r18, 0x0A	; 10
    28fe:	31 05       	cpc	r19, r1
    2900:	b1 f1       	breq	.+108    	; 0x296e <KEYPAD_4x4_adjustKeyNumber+0x112>
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	9c 81       	ldd	r25, Y+4	; 0x04
    2906:	8b 30       	cpi	r24, 0x0B	; 11
    2908:	91 05       	cpc	r25, r1
    290a:	a4 f5       	brge	.+104    	; 0x2974 <KEYPAD_4x4_adjustKeyNumber+0x118>
    290c:	2d c0       	rjmp	.+90     	; 0x2968 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    290e:	2b 81       	ldd	r18, Y+3	; 0x03
    2910:	3c 81       	ldd	r19, Y+4	; 0x04
    2912:	2e 30       	cpi	r18, 0x0E	; 14
    2914:	31 05       	cpc	r19, r1
    2916:	b9 f1       	breq	.+110    	; 0x2986 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	8e 30       	cpi	r24, 0x0E	; 14
    291e:	91 05       	cpc	r25, r1
    2920:	7c f1       	brlt	.+94     	; 0x2980 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2922:	2b 81       	ldd	r18, Y+3	; 0x03
    2924:	3c 81       	ldd	r19, Y+4	; 0x04
    2926:	2f 30       	cpi	r18, 0x0F	; 15
    2928:	31 05       	cpc	r19, r1
    292a:	79 f1       	breq	.+94     	; 0x298a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	80 31       	cpi	r24, 0x10	; 16
    2932:	91 05       	cpc	r25, r1
    2934:	69 f1       	breq	.+90     	; 0x2990 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2936:	2f c0       	rjmp	.+94     	; 0x2996 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2938:	87 e0       	ldi	r24, 0x07	; 7
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	2e c0       	rjmp	.+92     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    293e:	88 e0       	ldi	r24, 0x08	; 8
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	2b c0       	rjmp	.+86     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2944:	89 e0       	ldi	r24, 0x09	; 9
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	28 c0       	rjmp	.+80     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    294a:	85 e2       	ldi	r24, 0x25	; 37
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	25 c0       	rjmp	.+74     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2950:	84 e0       	ldi	r24, 0x04	; 4
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	22 c0       	rjmp	.+68     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2956:	85 e0       	ldi	r24, 0x05	; 5
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	1f c0       	rjmp	.+62     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    295c:	86 e0       	ldi	r24, 0x06	; 6
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	1c c0       	rjmp	.+56     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2962:	8a e2       	ldi	r24, 0x2A	; 42
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	19 c0       	rjmp	.+50     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	16 c0       	rjmp	.+44     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	13 c0       	rjmp	.+38     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2974:	83 e0       	ldi	r24, 0x03	; 3
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	10 c0       	rjmp	.+32     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    297a:	8d e2       	ldi	r24, 0x2D	; 45
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	0d c0       	rjmp	.+26     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 'c';  /* ASCII of Enter */
    2980:	83 e6       	ldi	r24, 0x63	; 99
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	0a c0       	rjmp	.+20     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2986:	19 82       	std	Y+1, r1	; 0x01
    2988:	08 c0       	rjmp	.+16     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    298a:	8d e3       	ldi	r24, 0x3D	; 61
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	05 c0       	rjmp	.+10     	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2990:	8b e2       	ldi	r24, 0x2B	; 43
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	02 c0       	rjmp	.+4      	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    299a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <EEPROM_writeByte>:
#include "../../MCAL/TWI/twi.h"



uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <EEPROM_writeByte+0x6>
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <EEPROM_writeByte+0x8>
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    29bc:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    29c0:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    29c4:	88 30       	cpi	r24, 0x08	; 8
    29c6:	11 f0       	breq	.+4      	; 0x29cc <EEPROM_writeByte+0x22>
        return ERROR;
    29c8:	1c 82       	std	Y+4, r1	; 0x04
    29ca:	28 c0       	rjmp	.+80     	; 0x2a1c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	80 70       	andi	r24, 0x00	; 0
    29d2:	97 70       	andi	r25, 0x07	; 7
    29d4:	88 0f       	add	r24, r24
    29d6:	89 2f       	mov	r24, r25
    29d8:	88 1f       	adc	r24, r24
    29da:	99 0b       	sbc	r25, r25
    29dc:	91 95       	neg	r25
    29de:	80 6a       	ori	r24, 0xA0	; 160
    29e0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    29e4:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    29e8:	88 31       	cpi	r24, 0x18	; 24
    29ea:	11 f0       	breq	.+4      	; 0x29f0 <EEPROM_writeByte+0x46>
        return ERROR; 
    29ec:	1c 82       	std	Y+4, r1	; 0x04
    29ee:	16 c0       	rjmp	.+44     	; 0x2a1c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    29f6:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    29fa:	88 32       	cpi	r24, 0x28	; 40
    29fc:	11 f0       	breq	.+4      	; 0x2a02 <EEPROM_writeByte+0x58>
        return ERROR;
    29fe:	1c 82       	std	Y+4, r1	; 0x04
    2a00:	0d c0       	rjmp	.+26     	; 0x2a1c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2a08:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2a0c:	88 32       	cpi	r24, 0x28	; 40
    2a0e:	11 f0       	breq	.+4      	; 0x2a14 <EEPROM_writeByte+0x6a>
        return ERROR;
    2a10:	1c 82       	std	Y+4, r1	; 0x04
    2a12:	04 c0       	rjmp	.+8      	; 0x2a1c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2a14:	0e 94 66 08 	call	0x10cc	; 0x10cc <TWI_stop>
	
    return SUCCESS;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	8c 83       	std	Y+4, r24	; 0x04
    2a1c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <EEPROM_readByte+0x6>
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <EEPROM_readByte+0x8>
    2a34:	0f 92       	push	r0
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	7c 83       	std	Y+4, r23	; 0x04
    2a40:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2a42:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2a46:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2a4a:	88 30       	cpi	r24, 0x08	; 8
    2a4c:	11 f0       	breq	.+4      	; 0x2a52 <EEPROM_readByte+0x26>
        return ERROR;
    2a4e:	1d 82       	std	Y+5, r1	; 0x05
    2a50:	44 c0       	rjmp	.+136    	; 0x2ada <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	80 70       	andi	r24, 0x00	; 0
    2a58:	97 70       	andi	r25, 0x07	; 7
    2a5a:	88 0f       	add	r24, r24
    2a5c:	89 2f       	mov	r24, r25
    2a5e:	88 1f       	adc	r24, r24
    2a60:	99 0b       	sbc	r25, r25
    2a62:	91 95       	neg	r25
    2a64:	80 6a       	ori	r24, 0xA0	; 160
    2a66:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2a6a:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2a6e:	88 31       	cpi	r24, 0x18	; 24
    2a70:	11 f0       	breq	.+4      	; 0x2a76 <EEPROM_readByte+0x4a>
        return ERROR;
    2a72:	1d 82       	std	Y+5, r1	; 0x05
    2a74:	32 c0       	rjmp	.+100    	; 0x2ada <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2a7c:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2a80:	88 32       	cpi	r24, 0x28	; 40
    2a82:	11 f0       	breq	.+4      	; 0x2a88 <EEPROM_readByte+0x5c>
        return ERROR;
    2a84:	1d 82       	std	Y+5, r1	; 0x05
    2a86:	29 c0       	rjmp	.+82     	; 0x2ada <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2a88:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2a8c:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2a90:	80 31       	cpi	r24, 0x10	; 16
    2a92:	11 f0       	breq	.+4      	; 0x2a98 <EEPROM_readByte+0x6c>
        return ERROR;
    2a94:	1d 82       	std	Y+5, r1	; 0x05
    2a96:	21 c0       	rjmp	.+66     	; 0x2ada <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	80 70       	andi	r24, 0x00	; 0
    2a9e:	97 70       	andi	r25, 0x07	; 7
    2aa0:	88 0f       	add	r24, r24
    2aa2:	89 2f       	mov	r24, r25
    2aa4:	88 1f       	adc	r24, r24
    2aa6:	99 0b       	sbc	r25, r25
    2aa8:	91 95       	neg	r25
    2aaa:	81 6a       	ori	r24, 0xA1	; 161
    2aac:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2ab0:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2ab4:	80 34       	cpi	r24, 0x40	; 64
    2ab6:	11 f0       	breq	.+4      	; 0x2abc <EEPROM_readByte+0x90>
        return ERROR;
    2ab8:	1d 82       	std	Y+5, r1	; 0x05
    2aba:	0f c0       	rjmp	.+30     	; 0x2ada <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2abc:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_readByteWithNACK>
    2ac0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2ac6:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2aca:	88 35       	cpi	r24, 0x58	; 88
    2acc:	11 f0       	breq	.+4      	; 0x2ad2 <EEPROM_readByte+0xa6>
        return ERROR;
    2ace:	1d 82       	std	Y+5, r1	; 0x05
    2ad0:	04 c0       	rjmp	.+8      	; 0x2ada <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2ad2:	0e 94 66 08 	call	0x10cc	; 0x10cc <TWI_stop>

    return SUCCESS;
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <EEPROM_writeArray>:



uint8 EEPROM_writeArray(uint16 u16addr,uint8 *u8arr,uint16 arr_size)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	28 97       	sbiw	r28, 0x08	; 8
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	9b 83       	std	Y+3, r25	; 0x03
    2b02:	8a 83       	std	Y+2, r24	; 0x02
    2b04:	7d 83       	std	Y+5, r23	; 0x05
    2b06:	6c 83       	std	Y+4, r22	; 0x04
    2b08:	5f 83       	std	Y+7, r21	; 0x07
    2b0a:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
    TWI_start();
    2b0c:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2b10:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2b14:	88 30       	cpi	r24, 0x08	; 8
    2b16:	11 f0       	breq	.+4      	; 0x2b1c <EEPROM_writeArray+0x30>
        return ERROR;
    2b18:	18 86       	std	Y+8, r1	; 0x08
    2b1a:	3d c0       	rjmp	.+122    	; 0x2b96 <EEPROM_writeArray+0xaa>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b20:	80 70       	andi	r24, 0x00	; 0
    2b22:	97 70       	andi	r25, 0x07	; 7
    2b24:	88 0f       	add	r24, r24
    2b26:	89 2f       	mov	r24, r25
    2b28:	88 1f       	adc	r24, r24
    2b2a:	99 0b       	sbc	r25, r25
    2b2c:	91 95       	neg	r25
    2b2e:	80 6a       	ori	r24, 0xA0	; 160
    2b30:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2b34:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2b38:	88 31       	cpi	r24, 0x18	; 24
    2b3a:	11 f0       	breq	.+4      	; 0x2b40 <EEPROM_writeArray+0x54>
        return ERROR;
    2b3c:	18 86       	std	Y+8, r1	; 0x08
    2b3e:	2b c0       	rjmp	.+86     	; 0x2b96 <EEPROM_writeArray+0xaa>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2b46:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2b4a:	88 32       	cpi	r24, 0x28	; 40
    2b4c:	11 f0       	breq	.+4      	; 0x2b52 <EEPROM_writeArray+0x66>
        return ERROR;
    2b4e:	18 86       	std	Y+8, r1	; 0x08
    2b50:	22 c0       	rjmp	.+68     	; 0x2b96 <EEPROM_writeArray+0xaa>

    /* write array to eeprom */
    for(i=0;i<arr_size;i++)
    2b52:	19 82       	std	Y+1, r1	; 0x01
    2b54:	14 c0       	rjmp	.+40     	; 0x2b7e <EEPROM_writeArray+0x92>
    {
    	TWI_writeByte(u8arr[i]);
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	80 81       	ld	r24, Z
    2b68:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    	 if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2b6c:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2b70:	88 32       	cpi	r24, 0x28	; 40
    2b72:	11 f0       	breq	.+4      	; 0x2b78 <EEPROM_writeArray+0x8c>
    		 return ERROR;
    2b74:	18 86       	std	Y+8, r1	; 0x08
    2b76:	0f c0       	rjmp	.+30     	; 0x2b96 <EEPROM_writeArray+0xaa>
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;

    /* write array to eeprom */
    for(i=0;i<arr_size;i++)
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	8f 5f       	subi	r24, 0xFF	; 255
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	8e 81       	ldd	r24, Y+6	; 0x06
    2b86:	9f 81       	ldd	r25, Y+7	; 0x07
    2b88:	28 17       	cp	r18, r24
    2b8a:	39 07       	cpc	r19, r25
    2b8c:	20 f3       	brcs	.-56     	; 0x2b56 <EEPROM_writeArray+0x6a>
    {
    	TWI_writeByte(u8arr[i]);
    	 if (TWI_getStatus() != TWI_MT_DATA_ACK)
    		 return ERROR;
    }
    TWI_stop();
    2b8e:	0e 94 66 08 	call	0x10cc	; 0x10cc <TWI_stop>
    return SUCCESS;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	88 87       	std	Y+8, r24	; 0x08
    2b96:	88 85       	ldd	r24, Y+8	; 0x08

}
    2b98:	28 96       	adiw	r28, 0x08	; 8
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <EEPROM_readArray>:

uint8 EEPROM_readArray(uint16 u16addr,uint8 *u8arr,uint16 arr_size)
{
    2baa:	0f 93       	push	r16
    2bac:	1f 93       	push	r17
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	28 97       	sbiw	r28, 0x08	; 8
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	9b 83       	std	Y+3, r25	; 0x03
    2bc4:	8a 83       	std	Y+2, r24	; 0x02
    2bc6:	7d 83       	std	Y+5, r23	; 0x05
    2bc8:	6c 83       	std	Y+4, r22	; 0x04
    2bca:	5f 83       	std	Y+7, r21	; 0x07
    2bcc:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
    TWI_start();
    2bce:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2bd2:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2bd6:	88 30       	cpi	r24, 0x08	; 8
    2bd8:	11 f0       	breq	.+4      	; 0x2bde <EEPROM_readArray+0x34>
        return ERROR;
    2bda:	18 86       	std	Y+8, r1	; 0x08
    2bdc:	6d c0       	rjmp	.+218    	; 0x2cb8 <EEPROM_readArray+0x10e>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	80 70       	andi	r24, 0x00	; 0
    2be4:	97 70       	andi	r25, 0x07	; 7
    2be6:	88 0f       	add	r24, r24
    2be8:	89 2f       	mov	r24, r25
    2bea:	88 1f       	adc	r24, r24
    2bec:	99 0b       	sbc	r25, r25
    2bee:	91 95       	neg	r25
    2bf0:	80 6a       	ori	r24, 0xA0	; 160
    2bf2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2bf6:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2bfa:	88 31       	cpi	r24, 0x18	; 24
    2bfc:	11 f0       	breq	.+4      	; 0x2c02 <EEPROM_readArray+0x58>
        return ERROR;
    2bfe:	18 86       	std	Y+8, r1	; 0x08
    2c00:	5b c0       	rjmp	.+182    	; 0x2cb8 <EEPROM_readArray+0x10e>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2c08:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2c0c:	88 32       	cpi	r24, 0x28	; 40
    2c0e:	11 f0       	breq	.+4      	; 0x2c14 <EEPROM_readArray+0x6a>
        return ERROR;
    2c10:	18 86       	std	Y+8, r1	; 0x08
    2c12:	52 c0       	rjmp	.+164    	; 0x2cb8 <EEPROM_readArray+0x10e>

    /* Send the Repeated Start Bit */
    TWI_start();
    2c14:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2c18:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2c1c:	80 31       	cpi	r24, 0x10	; 16
    2c1e:	11 f0       	breq	.+4      	; 0x2c24 <EEPROM_readArray+0x7a>
        return ERROR;
    2c20:	18 86       	std	Y+8, r1	; 0x08
    2c22:	4a c0       	rjmp	.+148    	; 0x2cb8 <EEPROM_readArray+0x10e>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	9b 81       	ldd	r25, Y+3	; 0x03
    2c28:	80 70       	andi	r24, 0x00	; 0
    2c2a:	97 70       	andi	r25, 0x07	; 7
    2c2c:	88 0f       	add	r24, r24
    2c2e:	89 2f       	mov	r24, r25
    2c30:	88 1f       	adc	r24, r24
    2c32:	99 0b       	sbc	r25, r25
    2c34:	91 95       	neg	r25
    2c36:	81 6a       	ori	r24, 0xA1	; 161
    2c38:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2c3c:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2c40:	80 34       	cpi	r24, 0x40	; 64
    2c42:	11 f0       	breq	.+4      	; 0x2c48 <EEPROM_readArray+0x9e>
        return ERROR;
    2c44:	18 86       	std	Y+8, r1	; 0x08
    2c46:	38 c0       	rjmp	.+112    	; 0x2cb8 <EEPROM_readArray+0x10e>

    /* Read array from Memory without send ACK */
    for(i=0;i<arr_size-1;i++)
    2c48:	19 82       	std	Y+1, r1	; 0x01
    2c4a:	15 c0       	rjmp	.+42     	; 0x2c76 <EEPROM_readArray+0xcc>
    {
    	u8arr[i] = TWI_readByteWithACK();
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	8c 81       	ldd	r24, Y+4	; 0x04
    2c54:	9d 81       	ldd	r25, Y+5	; 0x05
    2c56:	8c 01       	movw	r16, r24
    2c58:	02 0f       	add	r16, r18
    2c5a:	13 1f       	adc	r17, r19
    2c5c:	0e 94 88 08 	call	0x1110	; 0x1110 <TWI_readByteWithACK>
    2c60:	f8 01       	movw	r30, r16
    2c62:	80 83       	st	Z, r24
    	if (TWI_getStatus() != TWI_MR_DATA_ACK)
    2c64:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2c68:	80 35       	cpi	r24, 0x50	; 80
    2c6a:	11 f0       	breq	.+4      	; 0x2c70 <EEPROM_readArray+0xc6>
    		return ERROR;
    2c6c:	18 86       	std	Y+8, r1	; 0x08
    2c6e:	24 c0       	rjmp	.+72     	; 0x2cb8 <EEPROM_readArray+0x10e>
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;

    /* Read array from Memory without send ACK */
    for(i=0;i<arr_size-1;i++)
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	8f 5f       	subi	r24, 0xFF	; 255
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	28 17       	cp	r18, r24
    2c84:	39 07       	cpc	r19, r25
    2c86:	10 f3       	brcs	.-60     	; 0x2c4c <EEPROM_readArray+0xa2>
    	u8arr[i] = TWI_readByteWithACK();
    	if (TWI_getStatus() != TWI_MR_DATA_ACK)
    		return ERROR;
    }

    u8arr[arr_size-1] = TWI_readByteWithNACK();
    2c88:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8c:	9c 01       	movw	r18, r24
    2c8e:	21 50       	subi	r18, 0x01	; 1
    2c90:	30 40       	sbci	r19, 0x00	; 0
    2c92:	8c 81       	ldd	r24, Y+4	; 0x04
    2c94:	9d 81       	ldd	r25, Y+5	; 0x05
    2c96:	8c 01       	movw	r16, r24
    2c98:	02 0f       	add	r16, r18
    2c9a:	13 1f       	adc	r17, r19
    2c9c:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_readByteWithNACK>
    2ca0:	f8 01       	movw	r30, r16
    2ca2:	80 83       	st	Z, r24
        	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2ca4:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_getStatus>
    2ca8:	88 35       	cpi	r24, 0x58	; 88
    2caa:	11 f0       	breq	.+4      	; 0x2cb0 <EEPROM_readArray+0x106>
        		return ERROR;
    2cac:	18 86       	std	Y+8, r1	; 0x08
    2cae:	04 c0       	rjmp	.+8      	; 0x2cb8 <EEPROM_readArray+0x10e>

    /* Send the Stop Bit */
    TWI_stop();
    2cb0:	0e 94 66 08 	call	0x10cc	; 0x10cc <TWI_stop>

    return SUCCESS;
    2cb4:	f1 e0       	ldi	r31, 0x01	; 1
    2cb6:	f8 87       	std	Y+8, r31	; 0x08
    2cb8:	88 85       	ldd	r24, Y+8	; 0x08
}
    2cba:	28 96       	adiw	r28, 0x08	; 8
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	08 95       	ret

00002cd0 <DcMotor_Init>:
 * Initialize the DC Motor by:
 * 1. Setup the direction of the two motor pins as output by send the request to GPIO driver.
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	41 e0       	ldi	r20, 0x01	; 1
    2cde:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	41 e0       	ldi	r20, 0x01	; 1
    2ce8:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	60 e0       	ldi	r22, 0x00	; 0
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)/*argument take status and speed*/
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <DcMotor_Rotate+0x6>
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	6a 83       	std	Y+2, r22	; 0x02
	if(state == DC_MOTOR_CLOCKWISE)
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	71 f4       	brne	.+28     	; 0x2d36 <DcMotor_Rotate+0x30>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	60 e0       	ldi	r22, 0x00	; 0
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	61 e0       	ldi	r22, 0x01	; 1
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>

		PWM_Timer0_Start(speed);
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	0e 94 84 0b 	call	0x1708	; 0x1708 <PWM_Timer0_Start>
    2d34:	21 c0       	rjmp	.+66     	; 0x2d78 <DcMotor_Rotate+0x72>
	}
	else if(state == DC_MOTOR_ANTI_CLOCKWISE)
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	82 30       	cpi	r24, 0x02	; 2
    2d3a:	71 f4       	brne	.+28     	; 0x2d58 <DcMotor_Rotate+0x52>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>

		PWM_Timer0_Start(speed);
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	0e 94 84 0b 	call	0x1708	; 0x1708 <PWM_Timer0_Start>
    2d56:	10 c0       	rjmp	.+32     	; 0x2d78 <DcMotor_Rotate+0x72>
	}
	else if(state == DC_MOTOR_STOP)
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	88 23       	and	r24, r24
    2d5c:	69 f4       	brne	.+26     	; 0x2d78 <DcMotor_Rotate+0x72>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	61 e0       	ldi	r22, 0x01	; 1
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>

		PWM_Timer0_Start(speed);
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	0e 94 84 0b 	call	0x1708	; 0x1708 <PWM_Timer0_Start>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	08 95       	ret

00002d82 <Buzzer_init>:
/*
 * Description :
 * Setup Buzzer configuration.
 */
void Buzzer_init(void)
{
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	41 e0       	ldi	r20, 0x01	; 1
    2d90:	0e 94 c7 0b 	call	0x178e	; 0x178e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
}
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <Buzzer_on>:


void Buzzer_on(void)
{
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
}
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <Buzzer_off>:

void Buzzer_off(void)
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GPIO_writePin>
}
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <readKey>:

uint8 recievedByte;


uint8  readKey()
{
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	0f 92       	push	r0
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
	uint8 pressedKey=0;
    2dde:	19 82       	std	Y+1, r1	; 0x01

	pressedKey=KEYPAD_getPressedKey() ;
    2de0:	0e 94 dd 13 	call	0x27ba	; 0x27ba <KEYPAD_getPressedKey>
    2de4:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_delay_ms(70);
    2de6:	86 e4       	ldi	r24, 0x46	; 70
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
	LCD_displayCharacter('*');
    2dee:	8a e2       	ldi	r24, 0x2A	; 42
    2df0:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_displayCharacter>
	TIMER2_delay_ms(400);   /* delay function */
    2df4:	80 e9       	ldi	r24, 0x90	; 144
    2df6:	91 e0       	ldi	r25, 0x01	; 1
    2df8:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>

	return pressedKey;
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dfe:	0f 90       	pop	r0
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <changePW>:


void changePW()
{
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	2a 97       	sbiw	r28, 0x0a	; 10
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61

	uint8 ChangePW [PW_SIZE];
	LCD_clearScreen();
    2e1e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
	LCD_displayString("Your Current PW");
    2e22:	80 e6       	ldi	r24, 0x60	; 96
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
	LCD_moveCursor(1,0);
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
	LCD_displayString("PW:");
    2e32:	80 e7       	ldi	r24, 0x70	; 112
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>

	for(int i=0;i<PW_SIZE;i++)
    2e3a:	1e 82       	std	Y+6, r1	; 0x06
    2e3c:	1d 82       	std	Y+5, r1	; 0x05
    2e3e:	1e c0       	rjmp	.+60     	; 0x2e7c <changePW+0x76>
	{
		TIMER2_delay_ms(400);/*delay to call readkey function*/
    2e40:	80 e9       	ldi	r24, 0x90	; 144
    2e42:	91 e0       	ldi	r25, 0x01	; 1
    2e44:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
		/*current PW*/
		ChangePW[i] =readKey();
    2e48:	0d 81       	ldd	r16, Y+5	; 0x05
    2e4a:	1e 81       	ldd	r17, Y+6	; 0x06
    2e4c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <readKey>
    2e50:	28 2f       	mov	r18, r24
    2e52:	ce 01       	movw	r24, r28
    2e54:	07 96       	adiw	r24, 0x07	; 7
    2e56:	fc 01       	movw	r30, r24
    2e58:	e0 0f       	add	r30, r16
    2e5a:	f1 1f       	adc	r31, r17
    2e5c:	20 83       	st	Z, r18
		UART_sendByte(ChangePW[i]);
    2e5e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e60:	3e 81       	ldd	r19, Y+6	; 0x06
    2e62:	ce 01       	movw	r24, r28
    2e64:	07 96       	adiw	r24, 0x07	; 7
    2e66:	fc 01       	movw	r30, r24
    2e68:	e2 0f       	add	r30, r18
    2e6a:	f3 1f       	adc	r31, r19
    2e6c:	80 81       	ld	r24, Z
    2e6e:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
	LCD_clearScreen();
	LCD_displayString("Your Current PW");
	LCD_moveCursor(1,0);
	LCD_displayString("PW:");

	for(int i=0;i<PW_SIZE;i++)
    2e72:	8d 81       	ldd	r24, Y+5	; 0x05
    2e74:	9e 81       	ldd	r25, Y+6	; 0x06
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e80:	84 30       	cpi	r24, 0x04	; 4
    2e82:	91 05       	cpc	r25, r1
    2e84:	ec f2       	brlt	.-70     	; 0x2e40 <changePW+0x3a>
		/*current PW*/
		ChangePW[i] =readKey();
		UART_sendByte(ChangePW[i]);
	}

	recievedByte=UART_recieveByte();
    2e86:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
    2e8a:	80 93 5c 02 	sts	0x025C, r24

	if(	recievedByte == CORRECT_PW)
    2e8e:	80 91 5c 02 	lds	r24, 0x025C
    2e92:	83 34       	cpi	r24, 0x43	; 67
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <changePW+0x92>
    2e96:	83 c0       	rjmp	.+262    	; 0x2f9e <changePW+0x198>
	{
		LCD_clearScreen();
    2e98:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
		LCD_displayString("Enter New PW");
    2e9c:	84 e7       	ldi	r24, 0x74	; 116
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
		LCD_moveCursor(1,0);
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
		LCD_displayString("PW:");
    2eac:	80 e7       	ldi	r24, 0x70	; 112
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
		/*send first new PW*/
		for(int i=0;i<PW_SIZE;i++)
    2eb4:	1c 82       	std	Y+4, r1	; 0x04
    2eb6:	1b 82       	std	Y+3, r1	; 0x03
    2eb8:	1a c0       	rjmp	.+52     	; 0x2eee <changePW+0xe8>
		{
			ChangePW[i] =readKey();
    2eba:	0b 81       	ldd	r16, Y+3	; 0x03
    2ebc:	1c 81       	ldd	r17, Y+4	; 0x04
    2ebe:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <readKey>
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	07 96       	adiw	r24, 0x07	; 7
    2ec8:	fc 01       	movw	r30, r24
    2eca:	e0 0f       	add	r30, r16
    2ecc:	f1 1f       	adc	r31, r17
    2ece:	20 83       	st	Z, r18
			UART_sendByte(ChangePW[i]);
    2ed0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	07 96       	adiw	r24, 0x07	; 7
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e2 0f       	add	r30, r18
    2edc:	f3 1f       	adc	r31, r19
    2ede:	80 81       	ld	r24, Z
    2ee0:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
		LCD_clearScreen();
		LCD_displayString("Enter New PW");
		LCD_moveCursor(1,0);
		LCD_displayString("PW:");
		/*send first new PW*/
		for(int i=0;i<PW_SIZE;i++)
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	9c 83       	std	Y+4, r25	; 0x04
    2eec:	8b 83       	std	Y+3, r24	; 0x03
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef2:	84 30       	cpi	r24, 0x04	; 4
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	0c f3       	brlt	.-62     	; 0x2eba <changePW+0xb4>
		{
			ChangePW[i] =readKey();
			UART_sendByte(ChangePW[i]);
		}
		LCD_clearScreen();
    2ef8:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
		LCD_displayString("Confirm New PW");
    2efc:	81 e8       	ldi	r24, 0x81	; 129
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
		LCD_moveCursor(1,0);
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
		LCD_displayString("PW:");
    2f0c:	80 e7       	ldi	r24, 0x70	; 112
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>

		/*send second new PW*/
		for(int i=0;i<PW_SIZE;i++)
    2f14:	1a 82       	std	Y+2, r1	; 0x02
    2f16:	19 82       	std	Y+1, r1	; 0x01
    2f18:	1a c0       	rjmp	.+52     	; 0x2f4e <changePW+0x148>
		{
			ChangePW[i] =readKey();
    2f1a:	09 81       	ldd	r16, Y+1	; 0x01
    2f1c:	1a 81       	ldd	r17, Y+2	; 0x02
    2f1e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <readKey>
    2f22:	28 2f       	mov	r18, r24
    2f24:	ce 01       	movw	r24, r28
    2f26:	07 96       	adiw	r24, 0x07	; 7
    2f28:	fc 01       	movw	r30, r24
    2f2a:	e0 0f       	add	r30, r16
    2f2c:	f1 1f       	adc	r31, r17
    2f2e:	20 83       	st	Z, r18
			UART_sendByte(ChangePW[i]);
    2f30:	29 81       	ldd	r18, Y+1	; 0x01
    2f32:	3a 81       	ldd	r19, Y+2	; 0x02
    2f34:	ce 01       	movw	r24, r28
    2f36:	07 96       	adiw	r24, 0x07	; 7
    2f38:	fc 01       	movw	r30, r24
    2f3a:	e2 0f       	add	r30, r18
    2f3c:	f3 1f       	adc	r31, r19
    2f3e:	80 81       	ld	r24, Z
    2f40:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
		LCD_displayString("Confirm New PW");
		LCD_moveCursor(1,0);
		LCD_displayString("PW:");

		/*send second new PW*/
		for(int i=0;i<PW_SIZE;i++)
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	9a 81       	ldd	r25, Y+2	; 0x02
    2f48:	01 96       	adiw	r24, 0x01	; 1
    2f4a:	9a 83       	std	Y+2, r25	; 0x02
    2f4c:	89 83       	std	Y+1, r24	; 0x01
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	9a 81       	ldd	r25, Y+2	; 0x02
    2f52:	84 30       	cpi	r24, 0x04	; 4
    2f54:	91 05       	cpc	r25, r1
    2f56:	0c f3       	brlt	.-62     	; 0x2f1a <changePW+0x114>
		{
			ChangePW[i] =readKey();
			UART_sendByte(ChangePW[i]);
		}

		recievedByte=UART_recieveByte();
    2f58:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
    2f5c:	80 93 5c 02 	sts	0x025C, r24

		if(recievedByte == CHANGE_PW)
    2f60:	80 91 5c 02 	lds	r24, 0x025C
    2f64:	80 35       	cpi	r24, 0x50	; 80
    2f66:	99 f4       	brne	.+38     	; 0x2f8e <changePW+0x188>
		{
			LCD_clearScreen();
    2f68:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
			LCD_displayString("PW has been");
    2f6c:	80 e9       	ldi	r24, 0x90	; 144
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
			LCD_moveCursor(1,0);
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
			LCD_displayString("Changed");
    2f7c:	8c e9       	ldi	r24, 0x9C	; 156
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
			TIMER2_delay_ms(1500);
    2f84:	8c ed       	ldi	r24, 0xDC	; 220
    2f86:	95 e0       	ldi	r25, 0x05	; 5
    2f88:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <changePW+0x1a6>
		}
		else
		{
			recievedByte = TRY_AGAIN;
    2f8e:	84 e5       	ldi	r24, 0x54	; 84
    2f90:	80 93 5c 02 	sts	0x025C, r24
			TIMER2_delay_ms(500);
    2f94:	84 ef       	ldi	r24, 0xF4	; 244
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
    2f9c:	07 c0       	rjmp	.+14     	; 0x2fac <changePW+0x1a6>
		}
	}
	else
	{
		recievedByte = TRY_AGAIN;
    2f9e:	84 e5       	ldi	r24, 0x54	; 84
    2fa0:	80 93 5c 02 	sts	0x025C, r24
		TIMER2_delay_ms(500);
    2fa4:	84 ef       	ldi	r24, 0xF4	; 244
    2fa6:	91 e0       	ldi	r25, 0x01	; 1
    2fa8:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
	}
}
    2fac:	2a 96       	adiw	r28, 0x0a	; 10
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	08 95       	ret

00002fc2 <optionsMenue>:



void optionsMenue()
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <optionsMenue+0x6>
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2fcc:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
	LCD_displayString("+ Open the Door");
    2fd0:	84 ea       	ldi	r24, 0xA4	; 164
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
	LCD_moveCursor(1,0);
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
	LCD_displayString("- Change the Pin");
    2fe0:	84 eb       	ldi	r24, 0xB4	; 180
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>

	switch (KEYPAD_getPressedKey())
    2fe8:	0e 94 dd 13 	call	0x27ba	; 0x27ba <KEYPAD_getPressedKey>
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	3a 83       	std	Y+2, r19	; 0x02
    2ff2:	29 83       	std	Y+1, r18	; 0x01
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	8b 32       	cpi	r24, 0x2B	; 43
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	31 f0       	breq	.+12     	; 0x300a <optionsMenue+0x48>
    2ffe:	29 81       	ldd	r18, Y+1	; 0x01
    3000:	3a 81       	ldd	r19, Y+2	; 0x02
    3002:	2d 32       	cpi	r18, 0x2D	; 45
    3004:	31 05       	cpc	r19, r1
    3006:	a9 f0       	breq	.+42     	; 0x3032 <optionsMenue+0x70>
    3008:	19 c0       	rjmp	.+50     	; 0x303c <optionsMenue+0x7a>
	{
		case('+'):

			LCD_clearScreen();
    300a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
			/*send UART message motor to control unit to take action*/
			UART_sendByte(OPEN_DOOR);
    300e:	8f e4       	ldi	r24, 0x4F	; 79
    3010:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
			LCD_displayString("Opening the Door");
    3014:	85 ec       	ldi	r24, 0xC5	; 197
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>

			TIMER2_delay_ms(3500);
    301c:	8c ea       	ldi	r24, 0xAC	; 172
    301e:	9d e0       	ldi	r25, 0x0D	; 13
    3020:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
			LCD_clearScreen();
    3024:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
			LCD_displayString("Closing the Door");
    3028:	86 ed       	ldi	r24, 0xD6	; 214
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
    3030:	05 c0       	rjmp	.+10     	; 0x303c <optionsMenue+0x7a>

		break;
		case('-'):

			UART_sendByte(CHANGE_PW);
    3032:	80 e5       	ldi	r24, 0x50	; 80
    3034:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
			changePW();
    3038:	0e 94 03 17 	call	0x2e06	; 0x2e06 <changePW>
		break;

		default:
		break;
	}
}
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <main>:



int main(void)
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	62 97       	sbiw	r28, 0x12	; 18
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType config = {9600,DISABLED,ONE_BIT,EIGHT_BIT};
    305a:	ce 01       	movw	r24, r28
    305c:	07 96       	adiw	r24, 0x07	; 7
    305e:	9f 87       	std	Y+15, r25	; 0x0f
    3060:	8e 87       	std	Y+14, r24	; 0x0e
    3062:	e1 e5       	ldi	r30, 0x51	; 81
    3064:	f2 e0       	ldi	r31, 0x02	; 2
    3066:	f9 8b       	std	Y+17, r31	; 0x11
    3068:	e8 8b       	std	Y+16, r30	; 0x10
    306a:	f7 e0       	ldi	r31, 0x07	; 7
    306c:	fa 8b       	std	Y+18, r31	; 0x12
    306e:	e8 89       	ldd	r30, Y+16	; 0x10
    3070:	f9 89       	ldd	r31, Y+17	; 0x11
    3072:	00 80       	ld	r0, Z
    3074:	88 89       	ldd	r24, Y+16	; 0x10
    3076:	99 89       	ldd	r25, Y+17	; 0x11
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	99 8b       	std	Y+17, r25	; 0x11
    307c:	88 8b       	std	Y+16, r24	; 0x10
    307e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3080:	ff 85       	ldd	r31, Y+15	; 0x0f
    3082:	00 82       	st	Z, r0
    3084:	8e 85       	ldd	r24, Y+14	; 0x0e
    3086:	9f 85       	ldd	r25, Y+15	; 0x0f
    3088:	01 96       	adiw	r24, 0x01	; 1
    308a:	9f 87       	std	Y+15, r25	; 0x0f
    308c:	8e 87       	std	Y+14, r24	; 0x0e
    308e:	9a 89       	ldd	r25, Y+18	; 0x12
    3090:	91 50       	subi	r25, 0x01	; 1
    3092:	9a 8b       	std	Y+18, r25	; 0x12
    3094:	ea 89       	ldd	r30, Y+18	; 0x12
    3096:	ee 23       	and	r30, r30
    3098:	51 f7       	brne	.-44     	; 0x306e <main+0x28>
	UART_init(&config); /* Initialize the UART driver  */
    309a:	ce 01       	movw	r24, r28
    309c:	07 96       	adiw	r24, 0x07	; 7
    309e:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>

	LCD_init();			/* Initialize the LCD driver  */
    30a2:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <LCD_init>


	do{
		recievedByte = UART_recieveByte();
    30a6:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
    30aa:	80 93 5c 02 	sts	0x025C, r24
		/* Wait until MC2 is ready to receive the string
		 *  because the receive buffer is one byte
		 *  (Polling)so wait to avoid Over right in string */
	  }while(recievedByte != CONTROL_UINT_READY);
    30ae:	80 91 5c 02 	lds	r24, 0x025C
    30b2:	82 35       	cpi	r24, 0x52	; 82
    30b4:	c1 f7       	brne	.-16     	; 0x30a6 <main+0x60>


	while (1)
	{

		recievedByte = UART_recieveByte();/* Receive Byte from MC2 */
    30b6:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
    30ba:	80 93 5c 02 	sts	0x025C, r24
		/*** First time  enter password ***/
		if (recievedByte == FIRST_TIME )
    30be:	80 91 5c 02 	lds	r24, 0x025C
    30c2:	86 34       	cpi	r24, 0x46	; 70
    30c4:	09 f0       	breq	.+2      	; 0x30c8 <main+0x82>
    30c6:	69 c0       	rjmp	.+210    	; 0x319a <main+0x154>
		{
			LCD_displayString("     Welcome");
    30c8:	87 ee       	ldi	r24, 0xE7	; 231
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
			TIMER2_delay_ms(1500);
    30d0:	8c ed       	ldi	r24, 0xDC	; 220
    30d2:	95 e0       	ldi	r25, 0x05	; 5
    30d4:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
			LCD_clearScreen();
    30d8:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
			LCD_displayString("Enter PW");
    30dc:	84 ef       	ldi	r24, 0xF4	; 244
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
			LCD_moveCursor(1,0);
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
			LCD_displayString("PW:");
    30ec:	80 e7       	ldi	r24, 0x70	; 112
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>

			for(int i=0;i<PW_SIZE;i++)  /* Re-send the received byte to Terminal2 */
    30f4:	1e 82       	std	Y+6, r1	; 0x06
    30f6:	1d 82       	std	Y+5, r1	; 0x05
    30f8:	09 c0       	rjmp	.+18     	; 0x310c <main+0xc6>
			{
				UART_sendByte(readKey());
    30fa:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <readKey>
    30fe:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
			LCD_clearScreen();
			LCD_displayString("Enter PW");
			LCD_moveCursor(1,0);
			LCD_displayString("PW:");

			for(int i=0;i<PW_SIZE;i++)  /* Re-send the received byte to Terminal2 */
    3102:	8d 81       	ldd	r24, Y+5	; 0x05
    3104:	9e 81       	ldd	r25, Y+6	; 0x06
    3106:	01 96       	adiw	r24, 0x01	; 1
    3108:	9e 83       	std	Y+6, r25	; 0x06
    310a:	8d 83       	std	Y+5, r24	; 0x05
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	9e 81       	ldd	r25, Y+6	; 0x06
    3110:	84 30       	cpi	r24, 0x04	; 4
    3112:	91 05       	cpc	r25, r1
    3114:	94 f3       	brlt	.-28     	; 0x30fa <main+0xb4>
			{
				UART_sendByte(readKey());
			}
			recievedByte = UART_recieveByte();/* Second time re-enter password to confirm  */
    3116:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
    311a:	80 93 5c 02 	sts	0x025C, r24
			if (recievedByte == SECOND_TIME )
    311e:	80 91 5c 02 	lds	r24, 0x025C
    3122:	83 35       	cpi	r24, 0x53	; 83
    3124:	b1 f5       	brne	.+108    	; 0x3192 <main+0x14c>
			{
				LCD_clearScreen();
    3126:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
				LCD_displayString("Re-enter PW");
    312a:	8d ef       	ldi	r24, 0xFD	; 253
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
				LCD_moveCursor(1,0);
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	60 e0       	ldi	r22, 0x00	; 0
    3136:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
				LCD_displayString("PW:");
    313a:	80 e7       	ldi	r24, 0x70	; 112
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>

				for(int i=0;i<PW_SIZE;i++)
    3142:	1c 82       	std	Y+4, r1	; 0x04
    3144:	1b 82       	std	Y+3, r1	; 0x03
    3146:	09 c0       	rjmp	.+18     	; 0x315a <main+0x114>
				{
					UART_sendByte(readKey());
    3148:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <readKey>
    314c:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
				LCD_clearScreen();
				LCD_displayString("Re-enter PW");
				LCD_moveCursor(1,0);
				LCD_displayString("PW:");

				for(int i=0;i<PW_SIZE;i++)
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	9c 83       	std	Y+4, r25	; 0x04
    3158:	8b 83       	std	Y+3, r24	; 0x03
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	9c 81       	ldd	r25, Y+4	; 0x04
    315e:	84 30       	cpi	r24, 0x04	; 4
    3160:	91 05       	cpc	r25, r1
    3162:	94 f3       	brlt	.-28     	; 0x3148 <main+0x102>
				{
					UART_sendByte(readKey());
				}
				recievedByte = UART_recieveByte();/**  password saved **/
    3164:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
    3168:	80 93 5c 02 	sts	0x025C, r24
				if (recievedByte == PW_SET)
    316c:	80 91 5c 02 	lds	r24, 0x025C
    3170:	89 34       	cpi	r24, 0x49	; 73
    3172:	59 f4       	brne	.+22     	; 0x318a <main+0x144>
				{
					LCD_clearScreen();
    3174:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
					LCD_displayString(" PW Saved");
    3178:	89 e0       	ldi	r24, 0x09	; 9
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
					TIMER2_delay_ms(1500);/*delay 500msec*/
    3180:	8c ed       	ldi	r24, 0xDC	; 220
    3182:	95 e0       	ldi	r25, 0x05	; 5
    3184:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
    3188:	96 cf       	rjmp	.-212    	; 0x30b6 <main+0x70>
				}
				else
				{
					recievedByte = TRY_AGAIN;
    318a:	84 e5       	ldi	r24, 0x54	; 84
    318c:	80 93 5c 02 	sts	0x025C, r24
    3190:	92 cf       	rjmp	.-220    	; 0x30b6 <main+0x70>
				}
			}
			else
			{
				recievedByte = TRY_AGAIN;
    3192:	84 e5       	ldi	r24, 0x54	; 84
    3194:	80 93 5c 02 	sts	0x025C, r24
    3198:	8e cf       	rjmp	.-228    	; 0x30b6 <main+0x70>
			}
	      }
		else if (recievedByte == OPERATION_MODE)	/************ OPERATION MODE *********/
    319a:	80 91 5c 02 	lds	r24, 0x025C
    319e:	8d 34       	cpi	r24, 0x4D	; 77
    31a0:	09 f0       	breq	.+2      	; 0x31a4 <main+0x15e>
    31a2:	89 cf       	rjmp	.-238    	; 0x30b6 <main+0x70>
		{

			LCD_clearScreen();
    31a4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
			LCD_displayString("Enter the PW");
    31a8:	83 e1       	ldi	r24, 0x13	; 19
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
			LCD_moveCursor(1,0);
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
			LCD_displayString("PW:");
    31b8:	80 e7       	ldi	r24, 0x70	; 112
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>

			for(int i=0;i<PW_SIZE;i++)
    31c0:	1a 82       	std	Y+2, r1	; 0x02
    31c2:	19 82       	std	Y+1, r1	; 0x01
    31c4:	09 c0       	rjmp	.+18     	; 0x31d8 <main+0x192>
			{
				UART_sendByte(readKey());
    31c6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <readKey>
    31ca:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_sendByte>
			LCD_clearScreen();
			LCD_displayString("Enter the PW");
			LCD_moveCursor(1,0);
			LCD_displayString("PW:");

			for(int i=0;i<PW_SIZE;i++)
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	01 96       	adiw	r24, 0x01	; 1
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	89 83       	std	Y+1, r24	; 0x01
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	9a 81       	ldd	r25, Y+2	; 0x02
    31dc:	84 30       	cpi	r24, 0x04	; 4
    31de:	91 05       	cpc	r25, r1
    31e0:	94 f3       	brlt	.-28     	; 0x31c6 <main+0x180>
			{
				UART_sendByte(readKey());
			}
			recievedByte = UART_recieveByte();
    31e2:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_recieveByte>
    31e6:	80 93 5c 02 	sts	0x025C, r24
			if(recievedByte == CORRECT_PW)
    31ea:	80 91 5c 02 	lds	r24, 0x025C
    31ee:	83 34       	cpi	r24, 0x43	; 67
    31f0:	19 f4       	brne	.+6      	; 0x31f8 <main+0x1b2>
			{
				optionsMenue();
    31f2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <optionsMenue>
    31f6:	16 c0       	rjmp	.+44     	; 0x3224 <main+0x1de>
			}
			else if (recievedByte == ERROR_ALARM  )
    31f8:	80 91 5c 02 	lds	r24, 0x025C
    31fc:	85 34       	cpi	r24, 0x45	; 69
    31fe:	91 f4       	brne	.+36     	; 0x3224 <main+0x1de>
			{
				LCD_clearScreen();
    3200:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
				LCD_displayString("Sorry,warning ");
    3204:	80 e2       	ldi	r24, 0x20	; 32
    3206:	91 e0       	ldi	r25, 0x01	; 1
    3208:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
				LCD_moveCursor(1,0);
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	60 e0       	ldi	r22, 0x00	; 0
    3210:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_moveCursor>
				LCD_displayString("Wait 5 Minutes");
    3214:	8f e2       	ldi	r24, 0x2F	; 47
    3216:	91 e0       	ldi	r25, 0x01	; 1
    3218:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
				TIMER2_delay_ms(5000);
    321c:	88 e8       	ldi	r24, 0x88	; 136
    321e:	93 e1       	ldi	r25, 0x13	; 19
    3220:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
			}
			if(recievedByte == TRY_AGAIN)
    3224:	80 91 5c 02 	lds	r24, 0x025C
    3228:	84 35       	cpi	r24, 0x54	; 84
    322a:	09 f0       	breq	.+2      	; 0x322e <main+0x1e8>
    322c:	44 cf       	rjmp	.-376    	; 0x30b6 <main+0x70>
			{
				LCD_clearScreen();
    322e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_clearScreen>
				LCD_displayString("Try again!");
    3232:	8e e3       	ldi	r24, 0x3E	; 62
    3234:	91 e0       	ldi	r25, 0x01	; 1
    3236:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_displayString>
				TIMER2_delay_ms(1000);
    323a:	88 ee       	ldi	r24, 0xE8	; 232
    323c:	93 e0       	ldi	r25, 0x03	; 3
    323e:	0e 94 01 0b 	call	0x1602	; 0x1602 <TIMER2_delay_ms>
    3242:	39 cf       	rjmp	.-398    	; 0x30b6 <main+0x70>

00003244 <__mulsi3>:
    3244:	62 9f       	mul	r22, r18
    3246:	d0 01       	movw	r26, r0
    3248:	73 9f       	mul	r23, r19
    324a:	f0 01       	movw	r30, r0
    324c:	82 9f       	mul	r24, r18
    324e:	e0 0d       	add	r30, r0
    3250:	f1 1d       	adc	r31, r1
    3252:	64 9f       	mul	r22, r20
    3254:	e0 0d       	add	r30, r0
    3256:	f1 1d       	adc	r31, r1
    3258:	92 9f       	mul	r25, r18
    325a:	f0 0d       	add	r31, r0
    325c:	83 9f       	mul	r24, r19
    325e:	f0 0d       	add	r31, r0
    3260:	74 9f       	mul	r23, r20
    3262:	f0 0d       	add	r31, r0
    3264:	65 9f       	mul	r22, r21
    3266:	f0 0d       	add	r31, r0
    3268:	99 27       	eor	r25, r25
    326a:	72 9f       	mul	r23, r18
    326c:	b0 0d       	add	r27, r0
    326e:	e1 1d       	adc	r30, r1
    3270:	f9 1f       	adc	r31, r25
    3272:	63 9f       	mul	r22, r19
    3274:	b0 0d       	add	r27, r0
    3276:	e1 1d       	adc	r30, r1
    3278:	f9 1f       	adc	r31, r25
    327a:	bd 01       	movw	r22, r26
    327c:	cf 01       	movw	r24, r30
    327e:	11 24       	eor	r1, r1
    3280:	08 95       	ret

00003282 <__udivmodsi4>:
    3282:	a1 e2       	ldi	r26, 0x21	; 33
    3284:	1a 2e       	mov	r1, r26
    3286:	aa 1b       	sub	r26, r26
    3288:	bb 1b       	sub	r27, r27
    328a:	fd 01       	movw	r30, r26
    328c:	0d c0       	rjmp	.+26     	; 0x32a8 <__udivmodsi4_ep>

0000328e <__udivmodsi4_loop>:
    328e:	aa 1f       	adc	r26, r26
    3290:	bb 1f       	adc	r27, r27
    3292:	ee 1f       	adc	r30, r30
    3294:	ff 1f       	adc	r31, r31
    3296:	a2 17       	cp	r26, r18
    3298:	b3 07       	cpc	r27, r19
    329a:	e4 07       	cpc	r30, r20
    329c:	f5 07       	cpc	r31, r21
    329e:	20 f0       	brcs	.+8      	; 0x32a8 <__udivmodsi4_ep>
    32a0:	a2 1b       	sub	r26, r18
    32a2:	b3 0b       	sbc	r27, r19
    32a4:	e4 0b       	sbc	r30, r20
    32a6:	f5 0b       	sbc	r31, r21

000032a8 <__udivmodsi4_ep>:
    32a8:	66 1f       	adc	r22, r22
    32aa:	77 1f       	adc	r23, r23
    32ac:	88 1f       	adc	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	1a 94       	dec	r1
    32b2:	69 f7       	brne	.-38     	; 0x328e <__udivmodsi4_loop>
    32b4:	60 95       	com	r22
    32b6:	70 95       	com	r23
    32b8:	80 95       	com	r24
    32ba:	90 95       	com	r25
    32bc:	9b 01       	movw	r18, r22
    32be:	ac 01       	movw	r20, r24
    32c0:	bd 01       	movw	r22, r26
    32c2:	cf 01       	movw	r24, r30
    32c4:	08 95       	ret

000032c6 <__prologue_saves__>:
    32c6:	2f 92       	push	r2
    32c8:	3f 92       	push	r3
    32ca:	4f 92       	push	r4
    32cc:	5f 92       	push	r5
    32ce:	6f 92       	push	r6
    32d0:	7f 92       	push	r7
    32d2:	8f 92       	push	r8
    32d4:	9f 92       	push	r9
    32d6:	af 92       	push	r10
    32d8:	bf 92       	push	r11
    32da:	cf 92       	push	r12
    32dc:	df 92       	push	r13
    32de:	ef 92       	push	r14
    32e0:	ff 92       	push	r15
    32e2:	0f 93       	push	r16
    32e4:	1f 93       	push	r17
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	ca 1b       	sub	r28, r26
    32f0:	db 0b       	sbc	r29, r27
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	09 94       	ijmp

000032fe <__epilogue_restores__>:
    32fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3300:	39 88       	ldd	r3, Y+17	; 0x11
    3302:	48 88       	ldd	r4, Y+16	; 0x10
    3304:	5f 84       	ldd	r5, Y+15	; 0x0f
    3306:	6e 84       	ldd	r6, Y+14	; 0x0e
    3308:	7d 84       	ldd	r7, Y+13	; 0x0d
    330a:	8c 84       	ldd	r8, Y+12	; 0x0c
    330c:	9b 84       	ldd	r9, Y+11	; 0x0b
    330e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3310:	b9 84       	ldd	r11, Y+9	; 0x09
    3312:	c8 84       	ldd	r12, Y+8	; 0x08
    3314:	df 80       	ldd	r13, Y+7	; 0x07
    3316:	ee 80       	ldd	r14, Y+6	; 0x06
    3318:	fd 80       	ldd	r15, Y+5	; 0x05
    331a:	0c 81       	ldd	r16, Y+4	; 0x04
    331c:	1b 81       	ldd	r17, Y+3	; 0x03
    331e:	aa 81       	ldd	r26, Y+2	; 0x02
    3320:	b9 81       	ldd	r27, Y+1	; 0x01
    3322:	ce 0f       	add	r28, r30
    3324:	d1 1d       	adc	r29, r1
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	ed 01       	movw	r28, r26
    3332:	08 95       	ret

00003334 <itoa>:
    3334:	fb 01       	movw	r30, r22
    3336:	9f 01       	movw	r18, r30
    3338:	e8 94       	clt
    333a:	42 30       	cpi	r20, 0x02	; 2
    333c:	c4 f0       	brlt	.+48     	; 0x336e <itoa+0x3a>
    333e:	45 32       	cpi	r20, 0x25	; 37
    3340:	b4 f4       	brge	.+44     	; 0x336e <itoa+0x3a>
    3342:	4a 30       	cpi	r20, 0x0A	; 10
    3344:	29 f4       	brne	.+10     	; 0x3350 <itoa+0x1c>
    3346:	97 fb       	bst	r25, 7
    3348:	1e f4       	brtc	.+6      	; 0x3350 <itoa+0x1c>
    334a:	90 95       	com	r25
    334c:	81 95       	neg	r24
    334e:	9f 4f       	sbci	r25, 0xFF	; 255
    3350:	64 2f       	mov	r22, r20
    3352:	77 27       	eor	r23, r23
    3354:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    3358:	80 5d       	subi	r24, 0xD0	; 208
    335a:	8a 33       	cpi	r24, 0x3A	; 58
    335c:	0c f0       	brlt	.+2      	; 0x3360 <itoa+0x2c>
    335e:	89 5d       	subi	r24, 0xD9	; 217
    3360:	81 93       	st	Z+, r24
    3362:	cb 01       	movw	r24, r22
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	a1 f7       	brne	.-24     	; 0x3350 <itoa+0x1c>
    3368:	16 f4       	brtc	.+4      	; 0x336e <itoa+0x3a>
    336a:	5d e2       	ldi	r21, 0x2D	; 45
    336c:	51 93       	st	Z+, r21
    336e:	10 82       	st	Z, r1
    3370:	c9 01       	movw	r24, r18
    3372:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <strrev>

00003376 <strrev>:
    3376:	dc 01       	movw	r26, r24
    3378:	fc 01       	movw	r30, r24
    337a:	67 2f       	mov	r22, r23
    337c:	71 91       	ld	r23, Z+
    337e:	77 23       	and	r23, r23
    3380:	e1 f7       	brne	.-8      	; 0x337a <strrev+0x4>
    3382:	32 97       	sbiw	r30, 0x02	; 2
    3384:	04 c0       	rjmp	.+8      	; 0x338e <strrev+0x18>
    3386:	7c 91       	ld	r23, X
    3388:	6d 93       	st	X+, r22
    338a:	70 83       	st	Z, r23
    338c:	62 91       	ld	r22, -Z
    338e:	ae 17       	cp	r26, r30
    3390:	bf 07       	cpc	r27, r31
    3392:	c8 f3       	brcs	.-14     	; 0x3386 <strrev+0x10>
    3394:	08 95       	ret

00003396 <__udivmodhi4>:
    3396:	aa 1b       	sub	r26, r26
    3398:	bb 1b       	sub	r27, r27
    339a:	51 e1       	ldi	r21, 0x11	; 17
    339c:	07 c0       	rjmp	.+14     	; 0x33ac <__udivmodhi4_ep>

0000339e <__udivmodhi4_loop>:
    339e:	aa 1f       	adc	r26, r26
    33a0:	bb 1f       	adc	r27, r27
    33a2:	a6 17       	cp	r26, r22
    33a4:	b7 07       	cpc	r27, r23
    33a6:	10 f0       	brcs	.+4      	; 0x33ac <__udivmodhi4_ep>
    33a8:	a6 1b       	sub	r26, r22
    33aa:	b7 0b       	sbc	r27, r23

000033ac <__udivmodhi4_ep>:
    33ac:	88 1f       	adc	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	5a 95       	dec	r21
    33b2:	a9 f7       	brne	.-22     	; 0x339e <__udivmodhi4_loop>
    33b4:	80 95       	com	r24
    33b6:	90 95       	com	r25
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	08 95       	ret

000033be <_exit>:
    33be:	f8 94       	cli

000033c0 <__stop_program>:
    33c0:	ff cf       	rjmp	.-2      	; 0x33c0 <__stop_program>
